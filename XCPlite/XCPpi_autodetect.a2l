/* generated by ASAP2 Studio 2.2.12.8315 */
// generated by XCPlite 

ASAP2_VERSION 1 71
/begin PROJECT XCPlite ""

  /begin HEADER ""
    VERSION "1.0"
  /end HEADER

  /begin MODULE XCPlite ""

    /begin A2ML

        struct Protocol_Layer {
          uint;  /* XCP protocol layer version 
 "1.4" = 0x0104 */
          uint;  /* T1 [ms] */
          uint;  /* T2 [ms] */
          uint;  /* T3 [ms] */
          uint;  /* T4 [ms] */
          uint;  /* T5 [ms] */
          uint;  /* T6 [ms] */
          uint;  /* T7 [ms] */
          uchar;  /* MAX_CTO */
          uint;  /* MAX_DTO default for DAQ and STIM */
          enum {
            "BYTE_ORDER_MSB_LAST" = 0,
            "BYTE_ORDER_MSB_FIRST" = 1
          };
          enum {
            "ADDRESS_GRANULARITY_BYTE" = 1,
            "ADDRESS_GRANULARITY_WORD" = 2,
            "ADDRESS_GRANULARITY_DWORD" = 4
          };
          taggedstruct {
            ("OPTIONAL_CMD" enum {
              "GET_COMM_MODE_INFO" = 251,
              "GET_ID" = 250,
              "SET_REQUEST" = 249,
              "GET_SEED" = 248,
              "UNLOCK" = 247,
              "SET_MTA" = 246,
              "UPLOAD" = 245,
              "SHORT_UPLOAD" = 244,
              "BUILD_CHECKSUM" = 243,
              "TRANSPORT_LAYER_CMD" = 242,
              "USER_CMD" = 241,
              "DOWNLOAD" = 240,
              "DOWNLOAD_NEXT" = 239,
              "DOWNLOAD_MAX" = 238,
              "SHORT_DOWNLOAD" = 237,
              "MODIFY_BITS" = 236,
              "SET_CAL_PAGE" = 235,
              "GET_CAL_PAGE" = 234,
              "GET_PAG_PROCESSOR_INFO" = 233,
              "GET_SEGMENT_INFO" = 232,
              "GET_PAGE_INFO" = 231,
              "SET_SEGMENT_MODE" = 230,
              "GET_SEGMENT_MODE" = 229,
              "COPY_CAL_PAGE" = 228,
              "CLEAR_DAQ_LIST" = 227,
              "SET_DAQ_PTR" = 226,
              "WRITE_DAQ" = 225,
              "SET_DAQ_LIST_MODE" = 224,
              "GET_DAQ_LIST_MODE" = 223,
              "START_STOP_DAQ_LIST" = 222,
              "START_STOP_SYNCH" = 221,
              "GET_DAQ_CLOCK" = 220,
              "READ_DAQ" = 219,
              "GET_DAQ_PROCESSOR_INFO" = 218,
              "GET_DAQ_RESOLUTION_INFO" = 217,
              "GET_DAQ_LIST_INFO" = 216,
              "GET_DAQ_EVENT_INFO" = 215,
              "FREE_DAQ" = 214,
              "ALLOC_DAQ" = 213,
              "ALLOC_ODT" = 212,
              "ALLOC_ODT_ENTRY" = 211,
              "PROGRAM_START" = 210,
              "PROGRAM_CLEAR" = 209,
              "PROGRAM" = 208,
              "PROGRAM_RESET" = 207,
              "GET_PGM_PROCESSOR_INFO" = 206,
              "GET_SECTOR_INFO" = 205,
              "PROGRAM_PREPARE" = 204,
              "PROGRAM_FORMAT" = 203,
              "PROGRAM_NEXT" = 202,
              "PROGRAM_MAX" = 201,
              "PROGRAM_VERIFY" = 200,
              "WRITE_DAQ_MULTIPLE" = 199,
              "TIME_CORRELATION_PROPERTIES" = 198,
              "DTO_CTR_PROPERTIES" = 197
            })*;
            ("OPTIONAL_LEVEL1_CMD" enum {
              "GET_VERSION" = 0,
              "SET_DAQ_PACKED_MODE" = 1,
              "GET_DAQ_PACKED_MODE" = 2,
              "SW_DBG_COMMAND_SPACE" = 252,
              "POD_COMMAND_SPACE" = 253
            })*;
            "COMMUNICATION_MODE_SUPPORTED" taggedunion {
              "BLOCK" taggedstruct {
                "SLAVE" ;  /* Slave Block Mode supported */
                "MASTER" struct {
                  uchar;  /* MAX_BS */
                  uchar;  /* MIN_ST */
                };
              };
              "INTERLEAVED" uchar;  /* QUEUE_SIZE */
            };
            "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];  /* Name of the Seed&Key function 
 including file extension 
 without path */
            "MAX_DTO_STIM" uint;  /* overrules MAX_DTO see above for STIM use case */
            block "ECU_STATES" taggedstruct {
              (block "STATE" struct {
                uchar;  /* STATE_NUMBER */
                char[100];  /* STATE_NAME */
                taggedstruct {
                  "ECU_SWITCHED_TO_DEFAULT_PAGE" ;
                };
                enum {
                  "NOT_ACTIVE" = 0,
                  "ACTIVE" = 1,
                  "GETTER_ONLY" = 2
                };
                enum {
                  "NOT_ACTIVE" = 0,
                  "ACTIVE" = 1
                };
                enum {
                  "NOT_ACTIVE" = 0,
                  "ACTIVE" = 1
                };
                enum {
                  "NOT_ACTIVE" = 0,
                  "ACTIVE" = 1
                };
                taggedstruct {
                  (block "MEMORY_ACCESS" struct {
                    uchar;  /* SEGMENT_NUMBER */
                    uchar;  /* PAGE_NUMBER */
                    enum {
                      "READ_ACCESS_NOT_ALLOWED" = 0,
                      "READ_ACCESS_ALLOWED" = 1
                    };
                    enum {
                      "WRITE_ACCESS_NOT_ALLOWED" = 0,
                      "WRITE_ACCESS_ALLOWED" = 1
                    };
                  })*;
                };
              })*;
            };
          };
        };

        struct Daq {
          enum {
            "STATIC" = 0,
            "DYNAMIC" = 1
          };
          uint;  /* MAX_DAQ */
          uint;  /* MAX_EVENT_CHANNEL */
          uchar;  /* MIN_DAQ */
          enum {
            "OPTIMISATION_TYPE_DEFAULT" = 0,
            "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
            "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
            "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
            "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
            "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
          };
          enum {
            "ADDRESS_EXTENSION_FREE" = 0,
            "ADDRESS_EXTENSION_ODT" = 1,
            "ADDRESS_EXTENSION_DAQ" = 3
          };
          enum {
            "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
          };
          enum {
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
          };
          uchar;  /* MAX_ODT_ENTRY_SIZE_DAQ */
          enum {
            "NO_OVERLOAD_INDICATION" = 0,
            "OVERLOAD_INDICATION_PID" = 1,
            "OVERLOAD_INDICATION_EVENT" = 2
          };
          taggedstruct {
            "DAQ_ALTERNATING_SUPPORTED" uint;  /* Display_Event_Channel_Number */
            "PRESCALER_SUPPORTED" ;
            "RESUME_SUPPORTED" ;
            "STORE_DAQ_SUPPORTED" ;
            "DTO_CTR_FIELD_SUPPORTED" ;
            "OPTIMISATION_TYPE_ODT_STRICT" ;  /* strict mode shall only be used in combination with 
 OPTIMISATION_TYPE_ODT_TYPE_16 
 OPTIMISATION_TYPE_ODT_TYPE_32 
 OPTIMISATION_TYPE_ODT_TYPE_64 */
            block "STIM" struct {
              enum {
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
              };
              uchar;  /* MAX_ODT_ENTRY_SIZE_STIM */
              taggedstruct {
                "BIT_STIM_SUPPORTED" ;
                "MIN_ST_STIM" uchar;  /* separation time between DTOs 
 time in units of 100 microseconds */
              };
            };
            block "TIMESTAMP_SUPPORTED" struct {
              uint;  /* TIMESTAMP_TICKS */
              enum {
                "NO_TIME_STAMP" = 0,
                "SIZE_BYTE" = 1,
                "SIZE_WORD" = 2,
                "SIZE_DWORD" = 4
              };
              enum {
                "UNIT_1NS" = 0,
                "UNIT_10NS" = 1,
                "UNIT_100NS" = 2,
                "UNIT_1US" = 3,
                "UNIT_10US" = 4,
                "UNIT_100US" = 5,
                "UNIT_1MS" = 6,
                "UNIT_10MS" = 7,
                "UNIT_100MS" = 8,
                "UNIT_1S" = 9,
                "UNIT_1PS" = 10,
                "UNIT_10PS" = 11,
                "UNIT_100PS" = 12
              };
              taggedstruct {
                "TIMESTAMP_FIXED" ;
              };
            };
            "PID_OFF_SUPPORTED" ;
            "MAX_DAQ_TOTAL" uint;
            "MAX_ODT_TOTAL" uint;
            "MAX_ODT_DAQ_TOTAL" uint;
            "MAX_ODT_STIM_TOTAL" uint;
            "MAX_ODT_ENTRIES_TOTAL" uint;
            "MAX_ODT_ENTRIES_DAQ_TOTAL" uint;
            "MAX_ODT_ENTRIES_STIM_TOTAL" uint;
            "CPU_LOAD_MAX_TOTAL" float;
            "CORE_LOAD_MAX_TOTAL" float;  /* max load of all cores */
            (block "CORE_LOAD_MAX" struct {
              uint;  /* CORE_NR: core reference number */
              float;  /* CORE_LOAD_MAX: max load of core(CORE_NR) */
            })*;
            block "DAQ_MEMORY_CONSUMPTION" struct {
              ulong;  /* DAQ_MEMORY_LIMIT: in Elements[AG] */
              uint;  /* DAQ_SIZE: number of elements[AG] per DAQ list */
              uint;  /* ODT_SIZE: number of elements[AG] per ODT */
              uint;  /* ODT_ENTRY_SIZE: number of elements[AG] per ODT_entry */
              uint;  /* ODT_DAQ_BUFFER_ELEMENT_SIZE: number of 
 payload elements[AG]*factor = sizeof(send buffer)[AG] */
              uint;  /* ODT_STIM_BUFFER_ELEMENT_SIZE: number of 
 payload elements[AG]*factor = sizeof(receive buffer)[AG] */
              taggedstruct {
                block "BUFFER_RESERVE" struct {
                  uchar;  /* ODT_DAQ_BUFFER_ELEMENT_RESERVE  in % of 
 ODT_DAQ_BUFFER_ELEMENT_SIZE */
                  uchar;  /* ODT_STIM_BUFFER_ELEMENT_RESERVE in % of 
 ODT_STIM_BUFFER_ELEMENT_SIZE */
                };
              };
            };
            (block "DAQ_LIST" struct {
              uint;  /* DAQ_LIST_NUMBER */
              taggedstruct {
                "DAQ_LIST_TYPE" enum {
                  "DAQ" = 1,
                  "STIM" = 2,
                  "DAQ_STIM" = 3
                };
                "MAX_ODT" uchar;  /* MAX_ODT */
                "MAX_ODT_ENTRIES" uchar;  /* MAX_ODT_ENTRIES */
                "FIRST_PID" uchar;  /* FIRST_PID for this DAQ_LIST */
                "EVENT_FIXED" uint;  /* this DAQ_LIST always 
 in this event */
                "DAQ_PACKED_MODE_SUPPORTED" ;  /* supports DAQ packed mode */
                block "PREDEFINED" taggedstruct {
                  (block "ODT" struct {
                    uchar;  /* ODT number */
                    taggedstruct {
                      ("ODT_ENTRY" struct {
                        uchar;  /* ODT_ENTRY number */
                        ulong;  /* address of element */
                        uchar;  /* address extension of element */
                        uchar;  /* size of element [AG] */
                        uchar;  /* BIT_OFFSET */
                      })*;
                    };  /* end of ODT_ENTRY */
                  })*;  /* end of ODT */
                };  /* end of PREDEFINED */
              };
            })*;
            (block "EVENT" struct {
              char[101];  /* EVENT_CHANNEL_NAME */
              char[9];  /* EVENT_CHANNEL_SHORT_NAME */
              uint;  /* EVENT_CHANNEL_NUMBER */
              enum {
                "DAQ" = 1,
                "STIM" = 2,
                "DAQ_STIM" = 3
              };
              uchar;  /* MAX_DAQ_LIST */
              uchar;  /* EVENT_CHANNEL_TIME_CYCLE */
              uchar;  /* EVENT_CHANNEL_TIME_UNIT */
              uchar;  /* EVENT_CHANNEL_PRIORITY */
              taggedstruct {
                "COMPLEMENTARY_BYPASS_EVENT_CHANNEL_NUMBER" uint;  /* for compatibility reasons 
 not to be considered, if 1.3 Bypassing features are implemented */
                "CONSISTENCY" enum {
                  "DAQ" = 0,
                  "EVENT" = 1,
                  "ODT" = 2,
                  "NONE" = 3
                };
                "EVENT_COUNTER_PRESENT" ;
                "RELATED_EVENT_CHANNEL_NUMBER" uint;
                "RELATED_EVENT_CHANNEL_NUMBER_FIXED" ;  /* RELATED_EVENT_CHANNEL_NUMBER can not be modified. */
                "DTO_CTR_DAQ_MODE" enum {
                  "INSERT_COUNTER" = 0,
                  "INSERT_STIM_COUNTER_COPY" = 1
                };
                "DTO_CTR_DAQ_MODE_FIXED" ;  /* DTO_CTR_DAQ_MODE properties can not be modified. */
                "DTO_CTR_STIM_MODE" enum {
                  "DO_NOT_CHECK_COUNTER" = 0,
                  "CHECK_COUNTER" = 1
                };
                "DTO_CTR_STIM_MODE_FIXED" ;  /* DTO_CTR_STIM_MODE properties can not be modified */
                "STIM_DTO_CTR_COPY_PRESENT" ;  /* DTO CTR can be saved for later reference */
                block "DAQ_PACKED_MODE" struct {
                  enum {
                    "ELEMENT_GROUPED" = 1,
                    "EVENT_GROUPED" = 2
                  };
                  enum {
                    "STS_LAST" = 0,
                    "STS_FIRST" = 1
                  };
                  enum {
                    "OPTIONAL" = 0,
                    "MANDATORY" = 1
                  };
                  uint;  /* DAQ packed mode sample count */
                  taggedstruct {
                    ("ALT_SAMPLE_COUNT" uint)*;  /* other valid sample count values (optional) */
                  };
                };
                block "MIN_CYCLE_TIME" struct {
                  uchar;  /* EVENT_CHANNEL_TIME_CYCLE */
                  uchar;  /* EVENT_CHANNEL_TIME_UNIT */
                };
                block "BUFFER_RESERVE_EVENT" struct {
                  uchar;  /* ODT_DAQ_BUFFER_ELEMENT_RESERVE  in % of ODT_DAQ_BUFFER_ELEMENT_SIZE */
                  uchar;  /* ODT_STIM_BUFFER_ELEMENT_RESERVE in % of ODT_STIM_BUFFER_ELEMENT_SIZE */
                };
                "CPU_LOAD_MAX" float;
                block "CPU_LOAD_CONSUMPTION_DAQ" struct {
                  float;  /* DAQ_FACTOR */
                  float;  /* ODT_FACTOR */
                  float;  /* ODT_ENTRY_FACTOR */
                  taggedstruct {
                    (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct {
                      uint;  /* SIZE */
                      float;  /* SIZE_FACTOR */
                    })*;
                    block "CORE_LOAD_EP" struct {
                      uint;  /* CORE_NR: core reference number */
                      float;  /* CORE_LOAD_EP_MAX: max load of this event part */
                    };
                  };
                };
                block "CPU_LOAD_CONSUMPTION_STIM" struct {
                  float;  /* DAQ_FACTOR */
                  float;  /* ODT_FACTOR */
                  float;  /* ODT_ENTRY_FACTOR */
                  taggedstruct {
                    (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct {
                      uint;  /* SIZE */
                      float;  /* SIZE_FACTOR */
                    })*;
                    block "CORE_LOAD_EP" struct {
                      uint;  /* CORE_NR: core reference number */
                      float;  /* CORE_LOAD_EP_MAX: max load of this event part */
                    };
                  };
                };
                block "CPU_LOAD_CONSUMPTION_QUEUE" struct {
                  float;  /* ODT_FACTOR */
                  float;  /* ODT_ELEMENT_LOAD: length in elements[AG] */
                  taggedstruct {
                    block "CORE_LOAD_EP" struct {
                      uint;  /* CORE_NR: core reference number */
                      float;  /* CORE_LOAD_EP_MAX: max load of this event part */
                    };
                  };
                };
                block "CPU_LOAD_CONSUMPTION_QUEUE_STIM" struct {
                  float;  /* ODT_FACTOR */
                  float;  /* ODT_ELEMENT_LOAD: length in elements[AG] */
                  taggedstruct {
                    block "CORE_LOAD_EP" struct {
                      uint;  /* CORE_NR: core reference number */
                      float;  /* CORE_LOAD_EP_MAX: max load of this event part */
                    };
                  };
                };
              };
            })*;
          };  /* end of optional at DAQ */
        };

        taggedunion Daq_Event {
          "FIXED_EVENT_LIST" taggedstruct {
            ("EVENT" uint)*;
          };
          "VARIABLE" taggedstruct {
            block "AVAILABLE_EVENT_LIST" taggedstruct {
              ("EVENT" uint)*;
            };
            block "DEFAULT_EVENT_LIST" taggedstruct {
              ("EVENT" uint)*;
            };
            block "CONSISTENCY_EVENT_LIST" taggedstruct {
              ("EVENT" uint)*;
            };
          };
        };

        struct Pag {
          uchar;  /* MAX_SEGMENTS */
          taggedstruct {
            "FREEZE_SUPPORTED" ;
          };
        };

        struct Pgm {
          enum {
            "PGM_MODE_ABSOLUTE" = 1,
            "PGM_MODE_FUNCTIONAL" = 2,
            "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
          };
          uchar;  /* MAX_SECTORS */
          uchar;  /* MAX_CTO_PGM */
          taggedstruct {
            (block "SECTOR" struct {
              char[101];  /* SECTOR_NAME */
              uchar;  /* SECTOR_NUMBER */
              ulong;  /* Address */
              ulong;  /* Length */
              uchar;  /* CLEAR_SEQUENCE_NUMBER */
              uchar;  /* PROGRAM_SEQUENCE_NUMBER */
              uchar;  /* PROGRAM_METHOD */
            })*;  /* end of SECTOR */
            "COMMUNICATION_MODE_SUPPORTED" taggedunion {
              "BLOCK" taggedstruct {
                "SLAVE" ;  /* Slave Block Mode supported */
                "MASTER" struct {
                  uchar;  /* MAX_BS_PGM */
                  uchar;  /* MIN_ST_PGM */
                };
              };
              "INTERLEAVED" uchar;  /* QUEUE_SIZE_PGM */
            };
          };
        };

        struct Segment {
          uchar;  /* SEGMENT_NUMBER */
          uchar;  /* number of pages */
          uchar;  /* ADDRESS_EXTENSION */
          uchar;  /* COMPRESSION_METHOD */
          uchar;  /* ENCRYPTION_METHOD */
          taggedstruct {
            block "CHECKSUM" struct {
              enum {
                "XCP_ADD_11" = 1,
                "XCP_ADD_12" = 2,
                "XCP_ADD_14" = 3,
                "XCP_ADD_22" = 4,
                "XCP_ADD_24" = 5,
                "XCP_ADD_44" = 6,
                "XCP_CRC_16" = 7,
                "XCP_CRC_16_CITT" = 8,
                "XCP_CRC_32" = 9,
                "XCP_USER_DEFINED" = 255
              };
              taggedstruct {
                "MAX_BLOCK_SIZE" ulong;  /* maximum block size 
 for checksum calculation */
                "EXTERNAL_FUNCTION" char[256];  /* Name of the Checksum function 
 including file extension 
 without path */
                "MTA_BLOCK_SIZE_ALIGN" uint;  /* required alignment of MTA and block size */
              };
            };
            "DEFAULT_PAGE_NUMBER" uchar;  /* Number of the default page */
            (block "PAGE" struct {
              uchar;  /* PAGE_NUMBER */
              enum {
                "ECU_ACCESS_NOT_ALLOWED" = 0,
                "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                "ECU_ACCESS_DONT_CARE" = 3
              };
              enum {
                "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                "XCP_READ_ACCESS_DONT_CARE" = 3
              };
              enum {
                "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                "XCP_WRITE_ACCESS_DONT_CARE" = 3
              };
              taggedstruct {
                "INIT_SEGMENT" uchar;  /* references segment that initialises this page */
              };
            })*;  /* end of PAGE */
            (block "ADDRESS_MAPPING" struct {
              ulong;  /* source address */
              ulong;  /* destination address */
              ulong;  /* length */
            })*;
            "PGM_VERIFY" ulong;  /* verification value for PGM */
          };  /* end of optional */
        };

        taggedstruct Time_Correlation {
          "DAQ_TIMESTAMPS_RELATE_TO" enum {
            "XCP_SLAVE_CLOCK" = 0,
            "ECU_CLOCK" = 1
          };
          (block "CLOCK" struct {
            char;  /* globally unique clock identifier (UUID/EUI), 1st octet (most significant byte) */
            char;  /* globally unique clock identifier (UUID/EUI), 2nd octet */
            char;  /* globally unique clock identifier (UUID/EUI), 3rd octet */
            char;  /* globally unique clock identifier (UUID/EUI), 4th octet */
            char;  /* globally unique clock identifier (UUID/EUI), 5th octet */
            char;  /* globally unique clock identifier (UUID/EUI), 6th octet */
            char;  /* globally unique clock identifier (UUID/EUI), 7th octet */
            char;  /* globally unique clock identifier (UUID/EUI), 8th octet (least significant byte) */
            enum {
              "XCP_SLAVE_CLOCK" = 0,
              "ECU_CLOCK" = 1,
              "XCP_SLAVE_GRANDMASTER_CLOCK" = 2,
              "ECU_GRANDMASTER_CLOCK" = 3
            };
            enum {
              "RANDOMLY_READABLE" = 0,
              "LIMITED_READABLE" = 1,
              "NOT_READABLE" = 2
            };
            enum {
              "SYN_UNSUPPORTED" = 0,
              "SYNCHRONIZATION_ONLY" = 1,
              "SYNTONIZATION_ONLY" = 2,
              "SYN_ALL" = 3
            };
            uchar;  /* clock quality, stratum level */
            taggedstruct {
              block "TIMESTAMP_CHARACTERIZATION" struct {
                uint;  /* TIMESTAMP_TICKS */
                enum {
                  "UNIT_1NS" = 0,
                  "UNIT_10NS" = 1,
                  "UNIT_100NS" = 2,
                  "UNIT_1US" = 3,
                  "UNIT_10US" = 4,
                  "UNIT_100US" = 5,
                  "UNIT_1MS" = 6,
                  "UNIT_10MS" = 7,
                  "UNIT_100MS" = 8,
                  "UNIT_1S" = 9,
                  "UNIT_1PS" = 10,
                  "UNIT_10PS" = 11,
                  "UNIT_100PS" = 12
                };
                enum {
                  "SIZE_FOUR_BYTE" = 4,
                  "SIZE_EIGHT_BYTE" = 8
                };
              };
            };
            uint64;  /* MAX_TIMESTAMP_VALUE_BEFORE_WRAP_AROUND */
            enum {
              "ATOMIC_TIME" = 0,
              "UNIVERSAL_COORDINATED_TIME" = 1,
              "ARBITRARY" = 2
            };
          })*;
        };

        taggedstruct Common_Parameters {
          block "PROTOCOL_LAYER" struct Protocol_Layer;
          block "TIME_CORRELATION" taggedstruct Time_Correlation;
          block "SEGMENT" struct Segment;
          block "DAQ" struct Daq;
          block "PAG" struct Pag;
          block "PGM" struct Pgm;
          block "DAQ_EVENT" taggedunion Daq_Event;
        };

        struct CAN_Parameters {
          uint;  /* XCP on CAN version 
 "1.4" = 0x0104 */
          taggedstruct {
            "CAN_ID_BROADCAST" ulong;  /* Auto detection CAN-ID 
 master -> slaves 
 Bit31= 1: extended identifier 
 Bit30= 1: CAN-FD identifier */
            "CAN_ID_MASTER" ulong;  /* CMD/STIM CAN-ID 
 master -> slave 
 Bit31= 1: extended identifier 
 Bit30= 1: CAN-FD identifier */
            "CAN_ID_MASTER_INCREMENTAL" ;  /* master uses range of CAN-IDs 
 start of range = CAN_ID_MASTER 
 end of range = CAN_ID_MASTER+MAX_BS(_PGM)-1 */
            "CAN_ID_SLAVE" ulong;  /* RES/ERR/EV/SERV/DAQ CAN-ID 
 slave -> master 
 Bit31= 1: extended identifier 
 Bit30= 1: CAN-FD identifier */
            "CAN_ID_GET_DAQ_CLOCK_MULTICAST" ulong;  /* Only to be used for GET_DAQ_CLOCK_MULTICAST 
 master -> slaves 
 Bit31= 1: extended identifier 
 Bit30= 1: CAN-FD identifier */
            "BAUDRATE" ulong;  /* BAUDRATE [Hz] */
            "SAMPLE_POINT" uchar;  /* sample point 
 [% complete bit time] */
            "SAMPLE_RATE" enum {
              "SINGLE" = 1,
              "TRIPLE" = 3
            };
            "BTL_CYCLES" uchar;  /* BTL_CYCLES 
 [slots per bit time] */
            "SJW" uchar;  /* length synchr. segment 
 [BTL_CYCLES] */
            "SYNC_EDGE" enum {
              "SINGLE" = 1,
              "DUAL" = 2
            };
            "MAX_DLC_REQUIRED" ;  /* master to slave frames 
 always to have DLC = MAX_DLC = 8 */
            (block "DAQ_LIST_CAN_ID" struct {
              uint;  /* reference to DAQ_LIST_NUMBER */
              taggedstruct {
                "VARIABLE" ;
                "FIXED" ulong;  /* this DAQ_LIST always 
 on this CAN_ID */
              };
            })*;
            (block "EVENT_CAN_ID_LIST" struct {
              uint;  /* reference to EVENT_NUMBER */
              taggedstruct {
                ("FIXED" ulong)*;  /* this Event always on this ID */
              };
            })*;
            "MAX_BUS_LOAD" ulong;  /* maximum available bus 
 load in percent */
            "MEASUREMENT_SPLIT_ALLOWED" ;  /* Supports splitting of measurements to increase payload for MAX_DTO <= 8 */
            block "CAN_FD" struct {
              taggedstruct {
                "MAX_DLC" uint;  /* 8, 12, 16, 20, 24, 32, 48 or 64 */
                "CAN_FD_DATA_TRANSFER_BAUDRATE" ulong;  /* BAUDRATE [Hz] */
                "SAMPLE_POINT" uchar;  /* sample point receiver 
 [% complete bit time] */
                "BTL_CYCLES" uchar;  /* BTL_CYCLES 
 [slots per bit time] */
                "SJW" uchar;  /* length synchr. segment 
 [BTL_CYCLES] */
                "SYNC_EDGE" enum {
                  "SINGLE" = 1,
                  "DUAL" = 2
                };
                "MAX_DLC_REQUIRED" ;  /* master to slave frames 
 always to have DLC = MAX_DLC_for CAN-FD */
                "SECONDARY_SAMPLE_POINT" uchar;  /* sender sample point 
 [% complete bit time] */
                "TRANSCEIVER_DELAY_COMPENSATION" enum {
                  "OFF" = 0,
                  "ON" = 1
                };
              };
            };
          };
          taggedstruct {
            ("OPTIONAL_TL_SUBCMD" enum {
              "GET_SLAVE_ID" = 255,
              "GET_DAQ_ID" = 254,
              "SET_DAQ_ID" = 253,
              "GET_DAQ_CLOCK_MULTICAST" = 250
            })*;
          };
        };

        struct SxI_Parameters {
          uint;  /* XCP on SxI version 
 "1.4" = 0x0104 */
          ulong;  /* BAUDRATE [Hz] */
          taggedstruct {
            "ASYNCH_FULL_DUPLEX_MODE" struct {
              enum {
                "PARITY_NONE" = 0,
                "PARITY_ODD" = 1,
                "PARITY_EVEN" = 2
              };
              enum {
                "ONE_STOP_BIT" = 1,
                "TWO_STOP_BITS" = 2
              };
              taggedstruct {
                block "FRAMING" struct {
                  uchar;  /* SYNC */
                  uchar;  /* ESC */
                };
              };
            };
            "SYNCH_FULL_DUPLEX_MODE_BYTE" ;
            "SYNCH_FULL_DUPLEX_MODE_WORD" ;
            "SYNCH_FULL_DUPLEX_MODE_DWORD" ;
            "SYNCH_MASTER_SLAVE_MODE_BYTE" ;
            "SYNCH_MASTER_SLAVE_MODE_WORD" ;
            "SYNCH_MASTER_SLAVE_MODE_DWORD" ;
          };
          enum {
            "HEADER_LEN_BYTE" = 0,
            "HEADER_LEN_CTR_BYTE" = 1,
            "HEADER_LEN_FILL_BYTE" = 2,
            "HEADER_LEN_WORD" = 3,
            "HEADER_LEN_CTR_WORD" = 4,
            "HEADER_LEN_FILL_WORD" = 5
          };
          enum {
            "NO_CHECKSUM" = 0,
            "CHECKSUM_BYTE" = 1,
            "CHECKSUM_WORD" = 2
          };
        };

        struct TCP_IP_Parameters {
          uint;  /* XCP on TCP_IP version 
 "1.4" = 0x0104 */
          uint;  /* PORT */
          taggedunion {
            "HOST_NAME" char[256];
            "ADDRESS" char[15];
            "IPV6" char[39];
          };
          taggedstruct {
            "MAX_BUS_LOAD" ulong;  /* maximum available bus 
 load in percent */
            "MAX_BIT_RATE" ulong;  /* Network speed which is 
 the base for MAX_BUS_LOAD in Mbit */
          };
          taggedstruct {
            "PACKET_ALIGNMENT" enum {
              "PACKET_ALIGNMENT_8" = 0,
              "PACKET_ALIGNMENT_16" = 1,
              "PACKET_ALIGNMENT_32" = 2
            };
          };
          taggedstruct {
            ("OPTIONAL_TL_SUBCMD" enum {
              "GET_SLAVE_ID" = 255,
              "GET_SLAVE_ID_EXTENDED" = 253,
              "SET_SLAVE_IP_ADDRESS" = 252,
              "GET_DAQ_CLOCK_MULTICAST" = 250
            })*;
          };
        };

        struct UDP_IP_Parameters {
          uint;  /* XCP on UDP_IP version 
 "1.4" = 0x0104 */
          uint;  /* PORT */
          taggedunion {
            "HOST_NAME" char[256];
            "ADDRESS" char[15];
            "IPV6" char[39];
          };
          taggedstruct {
            "MAX_BUS_LOAD" ulong;  /* maximum available bus 
 load in percent */
            "MAX_BIT_RATE" ulong;  /* Network speed which is 
 the base for MAX_BUS_LOAD in Mbit */
          };
          taggedstruct {
            "PACKET_ALIGNMENT" enum {
              "PACKET_ALIGNMENT_8" = 0,
              "PACKET_ALIGNMENT_16" = 1,
              "PACKET_ALIGNMENT_32" = 2
            };
          };
          taggedstruct {
            ("OPTIONAL_TL_SUBCMD" enum {
              "GET_SLAVE_ID" = 255,
              "GET_SLAVE_ID_EXTENDED" = 253,
              "SET_SLAVE_IP_ADDRESS" = 252,
              "GET_DAQ_CLOCK_MULTICAST" = 250
            })*;
          };
        };

        struct ep_parameters {
          uchar;  /* ENDPOINT_NUMBER, not endpoint address */
          enum {
            "BULK_TRANSFER" = 2,
            "INTERRUPT_TRANSFER" = 3
          };
          uint;  /* wMaxPacketSize: Maximum packet 
 size of endpoint in bytes */
          uchar;  /* bInterval: polling of endpoint */
          enum {
            "MESSAGE_PACKING_SINGLE" = 0,
            "MESSAGE_PACKING_MULTIPLE" = 1,
            "MESSAGE_PACKING_STREAMING" = 2
          };
          enum {
            "ALIGNMENT_8_BIT" = 0,
            "ALIGNMENT_16_BIT" = 1,
            "ALIGNMENT_32_BIT" = 2,
            "ALIGNMENT_64_BIT" = 3
          };
          taggedstruct {
            "RECOMMENDED_HOST_BUFSIZE" uint;  /* Recommended size for the host 
 buffer size. The size is defined 
 as multiple of wMaxPacketSize. */
          };
        };  /* end of ep_parameters */

        struct USB_Parameters {
          uint;  /* XCP on USB version 
 1.4 = 0x0104 */
          uint;  /* Vendor ID */
          uint;  /* Product ID */
          uchar;  /* Number of interface */
          enum {
            "HEADER_LEN_BYTE" = 0,
            "HEADER_LEN_CTR_BYTE" = 1,
            "HEADER_LEN_FILL_BYTE" = 2,
            "HEADER_LEN_WORD" = 3,
            "HEADER_LEN_CTR_WORD" = 4,
            "HEADER_LEN_FILL_WORD" = 5
          };
          taggedunion {
            block "OUT_EP_CMD_STIM" struct ep_parameters;
          };
          taggedunion {
            block "IN_EP_RESERR_DAQ_EVSERV" struct ep_parameters;
          };
          taggedstruct {
            "ALTERNATE_SETTING_NO" uchar;  /* Number of alternate setting 
 String Descriptor of XCP 
 interface */
            "INTERFACE_STRING_DESCRIPTOR" char[101];
            (block "OUT_EP_ONLY_STIM" struct ep_parameters)*;
            (block "IN_EP_ONLY_DAQ" struct ep_parameters)*;
            block "IN_EP_ONLY_EVSERV" struct ep_parameters;
            (block "DAQ_LIST_USB_ENDPOINT" struct {
              uint;  /* reference to DAQ_LIST_NUMBER */
              taggedstruct {
                "FIXED_IN" uchar;  /* this DAQ list always 
 ENDPOINT_NUMBER, not endpoint address */
                "FIXED_OUT" uchar;  /* this STIM list always 
 ENDPOINT_NUMBER, not endpoint address */
              };
            })*;  /* end of DAQ_LIST_USB_ENDPOINT */
          };
          taggedstruct {
            ("OPTIONAL_TL_SUBCMD" enum {
              "GET_DAQ_EP" = 255,
              "SET_DAQ_EP" = 254
            })*;
          };  /* end of optional */
        };

        enum packet_assignment_type {
          "NOT_ALLOWED" = 0,
          "FIXED" = 1,
          "VARIABLE_INITIALISED" = 2,
          "VARIABLE" = 3
        };  /* end of packet_assignment_type */

        struct buffer {
          uchar;  /* FLX_BUF */
          taggedstruct {
            "MAX_FLX_LEN_BUF" taggedunion {
              "FIXED" uchar;  /* constant value */
              "VARIABLE" uchar;  /* initial value */
            };  /* end of MAX_FLX_LEN_BUF */
            block "LPDU_ID" taggedstruct {
              "FLX_SLOT_ID" taggedunion {
                "FIXED" uint;
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uint;
                };
              };  /* end of FLX_SLOT_ID */
              "OFFSET" taggedunion {
                "FIXED" uchar;
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uchar;
                };
              };  /* end of OFFSET */
              "CYCLE_REPETITION" taggedunion {
                "FIXED" uchar;
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uchar;
                };
              };  /* end of CYCLE_REPETITION */
              "CHANNEL" taggedunion {
                "FIXED" enum {
                  "A" = 0,
                  "B" = 1
                };
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" enum {
                    "A" = 0,
                    "B" = 1
                  };
                };
              };  /* end of CHANNEL */
            };  /* end of LPDU_ID */
            block "XCP_PACKET" taggedstruct {
              "CMD" enum packet_assignment_type;
              "RES_ERR" enum packet_assignment_type;
              "EV_SERV" enum packet_assignment_type;
              "DAQ" enum packet_assignment_type;
              "STIM" enum packet_assignment_type;
              "MULTICAST" enum packet_assignment_type;
            };  /* end of XCP_PACKET */
          };
        };  /* end of buffer */

        struct FLX_Parameters {
          uint;  /* XCP on FlexRay version 
 "1.4" = 0x0104 */
          uint;  /* T1_FLX [ms] */
          char[256];  /* FIBEX-file including CHI information 
 including extension 
 without path */
          char[256];  /* Cluster-ID */
          uchar;  /* NAX */
          enum {
            "HEADER_NAX" = 0,
            "HEADER_NAX_FILL" = 1,
            "HEADER_NAX_CTR" = 2,
            "HEADER_NAX_FILL3" = 3,
            "HEADER_NAX_CTR_FILL2" = 4,
            "HEADER_NAX_LEN" = 5,
            "HEADER_NAX_CTR_LEN" = 6,
            "HEADER_NAX_FILL2_LEN" = 7,
            "HEADER_NAX_CTR_FILL_LEN" = 8
          };
          enum {
            "PACKET_ALIGNMENT_8" = 0,
            "PACKET_ALIGNMENT_16" = 1,
            "PACKET_ALIGNMENT_32" = 2
          };
          taggedunion {
            block "INITIAL_CMD_BUFFER" struct buffer;
          };
          taggedunion {
            block "INITIAL_RES_ERR_BUFFER" struct buffer;
          };
          taggedstruct {
            (block "POOL_BUFFER" struct buffer)*;
          };
          taggedstruct {
            ("OPTIONAL_TL_SUBCMD" enum {
              "FLX_ASSIGN" = 255,
              "FLX_ACTIVATE" = 254,
              "FLX_DEACTIVATE" = 253,
              "GET_DAQ_FLX_BUF" = 252,
              "SET_DAQ_FLX_BUF" = 251,
              "GET_DAQ_CLOCK_MULTICAST" = 250
            })*;
          };
        };
      block "IF_DATA" taggedunion {
        "XCP" struct {
          taggedstruct Common_Parameters;  /* default parameters */
          taggedstruct {
            block "XCP_ON_CAN" struct {
              struct CAN_Parameters;  /* specific for CAN */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_SxI" struct {
              struct SxI_Parameters;  /* specific for SxI */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_TCP_IP" struct {
              struct TCP_IP_Parameters;  /* specific for TCP_IP */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_UDP_IP" struct {
              struct UDP_IP_Parameters;  /* specific for UDP */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_USB" struct {
              struct USB_Parameters;  /* specific for USB      */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_FLX" struct {
              struct FLX_Parameters;  /* specific for FlexRay  */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
          };  /* transport layer parameters*/
        };
        "XCPplus" struct {
          uint;  /* XCP plus AML structure version */
          taggedstruct Common_Parameters;  /* default parameters */
          taggedstruct {
            (block "XCP_ON_CAN" struct {
              struct CAN_Parameters;  /* specific for CAN */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_SxI" struct {
              struct SxI_Parameters;  /* specific for SxI */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_TCP_IP" struct {
              struct TCP_IP_Parameters;  /* specific for TCP_IP */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_UDP_IP" struct {
              struct UDP_IP_Parameters;  /* specific for UDP */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_USB" struct {
              struct USB_Parameters;  /* specific for USB */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_FLX" struct {
              struct FLX_Parameters;  /* specific for FlexRay */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
          };  /* transport layer specific parameters */
        };
      };
    /end A2ML

    /begin MOD_PAR ""
    /end MOD_PAR

    /begin MOD_COMMON ""
      BYTE_ORDER MSB_LAST
      ALIGNMENT_BYTE 1
      ALIGNMENT_WORD 1
      ALIGNMENT_LONG 1
      ALIGNMENT_FLOAT16_IEEE 1
      ALIGNMENT_FLOAT32_IEEE 1
      ALIGNMENT_FLOAT64_IEEE 1
      ALIGNMENT_INT64 1
    /end MOD_COMMON

    /begin IF_DATA XCP
      /begin PROTOCOL_LAYER
        0x0103
        0x03E8
        0x2710
        0x00
        0x00
        0x00
        0x00
        0x00
        0xFA
        0x0574
        BYTE_ORDER_MSB_LAST
        ADDRESS_GRANULARITY_BYTE
        OPTIONAL_CMD TIME_CORRELATION_PROPERTIES
        OPTIONAL_CMD WRITE_DAQ_MULTIPLE
        OPTIONAL_CMD ALLOC_ODT_ENTRY
        OPTIONAL_CMD ALLOC_ODT
        OPTIONAL_CMD ALLOC_DAQ
        OPTIONAL_CMD FREE_DAQ
        OPTIONAL_CMD GET_DAQ_RESOLUTION_INFO
        OPTIONAL_CMD GET_DAQ_PROCESSOR_INFO
        OPTIONAL_CMD GET_DAQ_CLOCK
        OPTIONAL_CMD START_STOP_SYNCH
        OPTIONAL_CMD START_STOP_DAQ_LIST
        OPTIONAL_CMD GET_DAQ_LIST_MODE
        OPTIONAL_CMD SET_DAQ_LIST_MODE
        OPTIONAL_CMD WRITE_DAQ
        OPTIONAL_CMD SET_DAQ_PTR
        OPTIONAL_CMD CLEAR_DAQ_LIST
        OPTIONAL_CMD DOWNLOAD
        OPTIONAL_CMD SHORT_UPLOAD
        OPTIONAL_CMD UPLOAD
        OPTIONAL_CMD SET_MTA
        OPTIONAL_CMD GET_ID
        OPTIONAL_CMD GET_COMM_MODE_INFO
      /end PROTOCOL_LAYER
      /begin DAQ
        DYNAMIC
        0x00
        0x03
        0x00
        OPTIMISATION_TYPE_DEFAULT
        ADDRESS_EXTENSION_FREE
        IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE
        GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE
        0xF8
        OVERLOAD_INDICATION_PID
        /begin TIMESTAMP_SUPPORTED
          0x01
          SIZE_DWORD
          UNIT_1US
          TIMESTAMP_FIXED
        /end TIMESTAMP_SUPPORTED
        /begin EVENT
          "ECU"
          "ECU"
          0x01
          DAQ
          0xFF
          0x01
          0x06
          0x00
        /end EVENT
        /begin EVENT
          "ECUPP"
          "ECUPP"
          0x02
          DAQ
          0xFF
          0x01
          0x06
          0x00
        /end EVENT
        /begin EVENT
          "ECUPPEXT"
          "ECUPPEXT"
          0x03
          DAQ
          0xFF
          0x01
          0x06
          0x00
        /end EVENT
      /end DAQ
      /begin PAG
        0x00
      /end PAG
      /begin PGM
        PGM_MODE_ABSOLUTE
        0x00
        0x00
      /end PGM
      /begin XCP_ON_UDP_IP
        0x0103
        0x15B3
        ADDRESS "172.31.31.194"
      /end XCP_ON_UDP_IP
    /end IF_DATA

    /begin TYPEDEF_MEASUREMENT Measurement_SWord ""
      SWORD NO_COMPU_METHOD 0 0 -32768 32767
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT Measurement_UByte ""
      UBYTE NO_COMPU_METHOD 0 0 0 255
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT Measurement_ULong ""
      ULONG NO_COMPU_METHOD 0 0 0 4294967295
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT Measurement_UWord ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _FLOAT64_IEEE ""
      FLOAT64_IEEE NO_COMPU_METHOD 0 0 -1E+12 1E+12
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _SBYTE ""
      SBYTE NO_COMPU_METHOD 0 0 -128 127
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _SLONG ""
      SLONG NO_COMPU_METHOD 0 0 -2147483648 2147483647
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _SWORD ""
      SWORD NO_COMPU_METHOD 0 0 -32768 32767
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _UBYTE ""
      UBYTE NO_COMPU_METHOD 0 0 0 255
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _ULONG ""
      ULONG NO_COMPU_METHOD 0 0 0 4294967295
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT _UWORD ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_STRUCTURE ecu "class ecu"
      0x10
      SYMBOL_TYPE_LINK "ecu"
      /begin STRUCTURE_COMPONENT
        ecuppCounter Measurement_UWord
        0
        SYMBOL_TYPE_LINK "ecuppCounter"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        byte Measurement_UByte
        2
        SYMBOL_TYPE_LINK "byte"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        word Measurement_UWord
        4
        SYMBOL_TYPE_LINK "word"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        dword Measurement_ULong
        8
        SYMBOL_TYPE_LINK "dword"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        sword Measurement_SWord
        12
        SYMBOL_TYPE_LINK "sword"
      /end STRUCTURE_COMPONENT
    /end TYPEDEF_STRUCTURE

    /begin CHARACTERISTIC ampl "Amplitude"
      VALUE 0x28018 _FLOAT64_IEEE 0 NO_COMPU_METHOD -1E+12 1E+12
      PHYS_UNIT "V"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray1 ""
      VAL_BLK 0x355B0 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray10 ""
      VAL_BLK 0x3861C _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray11 ""
      VAL_BLK 0x33544 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray12 ""
      VAL_BLK 0x35038 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray13 ""
      VAL_BLK 0x3BC7C _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray14 ""
      VAL_BLK 0x3C1FC _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray15 ""
      VAL_BLK 0x3A120 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray16 ""
      VAL_BLK 0x3AC10 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray2 ""
      VAL_BLK 0x3A698 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray3 ""
      VAL_BLK 0x38B94 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray4 ""
      VAL_BLK 0x3B704 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray5 ""
      VAL_BLK 0x3B188 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray6 ""
      VAL_BLK 0x33ABC _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray7 ""
      VAL_BLK 0x3C774 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray8 ""
      VAL_BLK 0x370A4 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray9 ""
      VAL_BLK 0x35B28 _UBYTE 0 NO_COMPU_METHOD 0 255
      MATRIX_DIM 1400
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT byteCounter ""
      UBYTE NO_COMPU_METHOD 0 0 0 255
      ECU_ADDRESS 0x33540
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT channel1 "Demo floating point signal"
      FLOAT64_IEEE channel1_COMPU_METHOD 0 0 -1E+12 1E+12
      ECU_ADDRESS 0x39110
      PHYS_UNIT "Volt"
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC curve1_32 "32 byte calibration array"
      MAP 0x28068 _UBYTE 0 NO_COMPU_METHOD 0 255
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY NO_COMPU_METHOD 32 0 31
        FIX_AXIS_PAR_DIST 0 1 32
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY NO_COMPU_METHOD 1 0 0
        FIX_AXIS_PAR_DIST 0 1 1
      /end AXIS_DESCR
      PHYS_UNIT ""
    /end CHARACTERISTIC

    /begin MEASUREMENT dwordCounter ""
      ULONG NO_COMPU_METHOD 0 0 0 4294967295
      ECU_ADDRESS 0x360A0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ecu.byte ""
      UBYTE NO_COMPU_METHOD 0 0 0 255
      ECU_ADDRESS 0x0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x03
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ecu.dword ""
      ULONG NO_COMPU_METHOD 0 0 0 4294967295
      ECU_ADDRESS 0x0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x03
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ecu.ecuppCounter ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
      ECU_ADDRESS 0x0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x03
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ecu.word ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
      ECU_ADDRESS 0x0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x03
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ecuCounter ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
      ECU_ADDRESS 0x280C8
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC gCmdCycle "Command handler cycle time"
      VALUE 0x2809C _ULONG 0 NO_COMPU_METHOD 0 4294967295
      PHYS_UNIT "us"
    /end CHARACTERISTIC

    /begin MEASUREMENT gEcu.ecuppCounter ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
      ECU_ADDRESS 0x525D0
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x02
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC gExit "Quit application"
      VALUE 0x280DC _UBYTE 0 NO_COMPU_METHOD 0 255
      PHYS_UNIT ""
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gFlushCycle "Flush cycle time"
      VALUE 0x280A0 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      PHYS_UNIT "us"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerECU "ECU cycle time (ns delay)"
      VALUE 0x280A4 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      PHYS_UNIT "ns"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerECUpp "ECU cycle time (ns delay)"
      VALUE 0x280A8 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      PHYS_UNIT "ns"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerServer "Server loop cycle time (ns delay)"
      VALUE 0x28098 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      PHYS_UNIT "ns"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gXcpDebugLevel "Debug verbosity"
      VALUE 0x280AC _UBYTE 0 NO_COMPU_METHOD 0 255
      PHYS_UNIT ""
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray1 ""
      VAL_BLK 0x39120 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      MATRIX_DIM 1024
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray2 ""
      VAL_BLK 0x3761C _ULONG 0 NO_COMPU_METHOD 0 4294967295
      MATRIX_DIM 1024
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray3 ""
      VAL_BLK 0x360A4 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      MATRIX_DIM 1024
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray4 ""
      VAL_BLK 0x34038 _ULONG 0 NO_COMPU_METHOD 0 4294967295
      MATRIX_DIM 1024
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC map1_8_8 "8*8 byte calibration array"
      MAP 0x28028 _UBYTE 0 NO_COMPU_METHOD 0 255
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY NO_COMPU_METHOD 8 0 7
        FIX_AXIS_PAR_DIST 0 1 8
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY NO_COMPU_METHOD 8 0 7
        FIX_AXIS_PAR_DIST 0 1 8
      /end AXIS_DESCR
      PHYS_UNIT ""
    /end CHARACTERISTIC

    /begin CHARACTERISTIC offset "Offset"
      VALUE 0x280D0 _FLOAT64_IEEE 0 NO_COMPU_METHOD -1E+12 1E+12
      PHYS_UNIT "V"
    /end CHARACTERISTIC

    /begin CHARACTERISTIC period "Period"
      VALUE 0x28020 _FLOAT64_IEEE 0 NO_COMPU_METHOD -1E+12 1E+12
      PHYS_UNIT "s"
    /end CHARACTERISTIC

    /begin MEASUREMENT sbyteCounter ""
      SBYTE NO_COMPU_METHOD 0 0 -128 127
      ECU_ADDRESS 0x3C1F4
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT sdwordCounter ""
      SLONG NO_COMPU_METHOD 0 0 -2147483648 2147483647
      ECU_ADDRESS 0x3C1F8
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT swordCounter ""
      SWORD NO_COMPU_METHOD 0 0 -32768 32767
      ECU_ADDRESS 0x34034
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT timer "Time in s"
      FLOAT64_IEEE timer_COMPU_METHOD 0 0 -1E+12 1E+12
      ECU_ADDRESS 0x39118
      PHYS_UNIT "s"
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT wordCounter ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
      ECU_ADDRESS 0x3B700
      /begin IF_DATA XCP
        /begin DAQ_EVENT FIXED_EVENT_LIST
          EVENT 0x01
        /end DAQ_EVENT
      /end IF_DATA
    /end MEASUREMENT

    /begin COMPU_METHOD channel1_COMPU_METHOD ""
      LINEAR "%6.3" "Volt"
      COEFFS_LINEAR 1 1
    /end COMPU_METHOD

    /begin COMPU_METHOD timer_COMPU_METHOD ""
      LINEAR "%6.3" "s"
      COEFFS_LINEAR 1 0
    /end COMPU_METHOD

    /begin RECORD_LAYOUT _FLOAT64_IEEE
      FNC_VALUES 1 FLOAT64_IEEE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _SBYTE
      FNC_VALUES 1 SBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _SLONG
      FNC_VALUES 1 SLONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _SWORD
      FNC_VALUES 1 SWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _UBYTE
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _ULONG
      FNC_VALUES 1 ULONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT _UWORD
      FNC_VALUES 1 UWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin GROUP Arrays ""
      /begin REF_CHARACTERISTIC
        byteArray1 byteArray10 byteArray11 byteArray12 byteArray13 byteArray14 byteArray15
        byteArray16 byteArray2 byteArray3 byteArray4 byteArray5 byteArray6 byteArray7 byteArray8
        byteArray9 longArray1 longArray2 longArray3 longArray4
      /end REF_CHARACTERISTIC
    /end GROUP

    /begin GROUP Test_Parameters ""
      /begin REF_CHARACTERISTIC
        gCmdCycle gExit gFlushCycle gTaskCycleTimerECU gTaskCycleTimerECUpp gTaskCycleTimerServer gXcpDebugLevel
      /end REF_CHARACTERISTIC
    /end GROUP

  /end MODULE

/end PROJECT
