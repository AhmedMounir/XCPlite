/* generated by ASAP2 Studio 2.2.4.7886 */
// @@@@ File written by CANAPE_VERSION 18 0 30 @@@@ 

ASAP2_VERSION 1 71
/begin PROJECT XCPpi "RaspberryPi XCP demo"

  /begin HEADER ""
    VERSION "1.0"
  /end HEADER

  /begin MODULE RaspberryPi4 ""

    /begin A2ML

        struct UDP_Parameters {
          uint;  /* XCP on UDP version, currently 0x0100 */
          uint;  /* PORT */
          taggedunion {
            "HOST_NAME" char[256];
            "ADDRESS" char[15];
          };
        };

        struct SIMULINK_Parameters {
          taggedstruct {
            "MODEL_NAME" char[64];
          };
        };

        struct Protocol_Layer {
          uint;  /* XCP protocol layer version, currently 0x101*/
          uint;  /* T1 [ms] Time-out of the standard CTO, for example CONNECT*/
          uint;  /* T2 [ms] Time-out of the checksum calculation*/
          uint;  /* T3 [ms] Time-out of the non-volatile memory programming: PROGRAM_START, PROGRAM_VERIFY, PROGRAM_PREPARE*/
          uint;  /* T4 [ms] Time-out of the non-volatile memory programming: PROGRAM_CLEAR*/
          uint;  /* T5 [ms] Time-out of the non-volatile memory programming: PROGRAM, PROGRAM_RESET, PROGRAM_MAX*/
          uint;  /* T6 [ms] Time-out of the command CONNECT(USER_DEFINED)*/
          uint;  /* T7 [ms] Time-out of the pre-action*/
          uchar;  /* MAX_CTO: Indicates the maximum length of a CTO packet in bytes. */
          uint;  /* MAX_DTO: Indicates the maximum length of a DTO packet in bytes. */
          enum {
            "BYTE_ORDER_MSB_LAST" = 0,
            "BYTE_ORDER_MSB_FIRST" = 1
          };  /* BYTE_ORDER: BYTE_ORDER_MSB_LAST = Intel, BYTE_ORDER_MSB_FIRST = Motorola*/
          enum {
            "ADDRESS_GRANULARITY_BYTE" = 1,
            "ADDRESS_GRANULARITY_WORD" = 2,
            "ADDRESS_GRANULARITY_DWORD" = 4
          };  /*The address granularity indicates the size of an element contained at a single address.*/
          taggedstruct {
            ("OPTIONAL_CMD" enum {
              "GET_COMM_MODE_INFO" = 251,
              "GET_ID" = 250,
              "SET_REQUEST" = 249,
              "GET_SEED" = 248,
              "UNLOCK" = 247,
              "SET_MTA" = 246,
              "UPLOAD" = 245,
              "SHORT_UPLOAD" = 244,
              "BUILD_CHECKSUM" = 243,
              "TRANSPORT_LAYER_CMD" = 242,
              "USER_CMD" = 241,
              "DOWNLOAD" = 240,
              "DOWNLOAD_NEXT" = 239,
              "DOWNLOAD_MAX" = 238,
              "SHORT_DOWNLOAD" = 237,
              "MODIFY_BITS" = 236,
              "SET_CAL_PAGE" = 235,
              "GET_CAL_PAGE" = 234,
              "GET_PAG_PROCESSOR_INFO" = 233,
              "GET_SEGMENT_INFO" = 232,
              "GET_PAGE_INFO" = 231,
              "SET_SEGMENT_MODE" = 230,
              "GET_SEGMENT_MODE" = 229,
              "COPY_CAL_PAGE" = 228,
              "CLEAR_DAQ_LIST" = 227,
              "SET_DAQ_PTR" = 226,
              "WRITE_DAQ" = 225,
              "SET_DAQ_LIST_MODE" = 224,
              "GET_DAQ_LIST_MODE" = 223,
              "START_STOP_DAQ_LIST" = 222,
              "START_STOP_SYNCH" = 221,
              "GET_DAQ_CLOCK" = 220,
              "READ_DAQ" = 219,
              "GET_DAQ_PROCESSOR_INFO" = 218,
              "GET_DAQ_RESOLUTION_INFO" = 217,
              "GET_DAQ_LIST_INFO" = 216,
              "GET_DAQ_EVENT_INFO" = 215,
              "FREE_DAQ" = 214,
              "ALLOC_DAQ" = 213,
              "ALLOC_ODT" = 212,
              "ALLOC_ODT_ENTRY" = 211,
              "PROGRAM_START" = 210,
              "PROGRAM_CLEAR" = 209,
              "PROGRAM" = 208,
              "PROGRAM_RESET" = 207,
              "GET_PGM_PROCESSOR_INFO" = 206,
              "GET_SECTOR_INFO" = 205,
              "PROGRAM_PREPARE" = 204,
              "PROGRAM_FORMAT" = 203,
              "PROGRAM_NEXT" = 202,
              "PROGRAM_MAX" = 201,
              "PROGRAM_VERIFY" = 200,
              "WRITE_DAQ_MULTIPLE" = 199
            })*;  /* XCP-Code of optional command supported by the slave*/
            "COMMUNICATION_MODE_SUPPORTED" taggedunion {
              "BLOCK" taggedstruct {
                "SLAVE" ;
                "MASTER" struct {
                  uchar;  /* MAX_BS: Indicates the maximum allowed block size as the number of consecutive command packets in a block sequence*/
                  uchar;  /* MIN_ST: Indicates the required minimum separation time between the packets of a block transfer from the master device to the slave device in units of 100 ms*/
                };
              };
              "INTERLEAVED" uchar;  /* QUEUE_SIZE: indicates the maximum number of consecutive command packets the master can send to the receipt queue of the slave*/
            };
            "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];  /* Name of the Seed&Key function*/
          };
        };

        struct Daq {
          enum {
            "STATIC" = 0,
            "DYNAMIC" = 1
          };  /*The flag indicates whether the DAQ lists that are not PREDEFINED shall be configured statically or dynamically*/
          uint;  /* MAX_DAQ: Total number of available DAQ lists */
          uint;  /* MAX_EVENT_CHANNEL: Total number of available event channels*/
          uchar;  /* MIN_DAQ: Total number of predefined DAQ lists */
          enum {
            "OPTIMISATION_TYPE_DEFAULT" = 0,
            "OPTIMISATION_TYPE_ODT_TYPE_16" = 1,
            "OPTIMISATION_TYPE_ODT_TYPE_32" = 2,
            "OPTIMISATION_TYPE_ODT_TYPE_64" = 3,
            "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4,
            "OPTIMISATION_TYPE_MAX_ENTRY_SIZE" = 5
          };  /* Indicate the Type of Optimisation Method the master preferably should use.*/
          enum {
            "ADDRESS_EXTENSION_FREE" = 0,
            "ADDRESS_EXTENSION_ODT" = 1,
            "ADDRESS_EXTENSION_DAQ" = 3
          };  /*The flag indicates whether the address extension of all entries within one ODT or within one DAQ must be the same. */
          enum {
            "IDENTIFICATION_FIELD_TYPE_ABSOLUTE" = 0,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE" = 1,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD" = 2,
            "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3
          };  /* The type of Identification Field the slave will use when transferring DAQ Packets to the master*/
          enum {
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE" = 1,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD" = 2,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD" = 4,
            "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG" = 8
          };  /* Granularity for size of ODT entry */
          uchar;  /* MAX_ODT_ENTRY_SIZE_DAQ Maximum size of ODT entry (DIRECTION = DAQ) */
          enum {
            "NO_OVERLOAD_INDICATION" = 0,
            "OVERLOAD_INDICATION_PID" = 1,
            "OVERLOAD_INDICATION_EVENT" = 2
          };  /*OVERLOAD_INDICATION_PID: This means the higest bit is set in the PID, when an overload occurs
OVERLOAD_INDICATION_EVENT: This means an event is set, when an overload occurs*/
          taggedstruct {
            "DAQ_ALTERNATING_SUPPORTED" uint;  /*This flag selects the alternating display mode.*/
            "PRESCALER_SUPPORTED" ;  /*This flag indicates that all DAQ lists support the prescaler for reducing the transmission period.*/
            "RESUME_SUPPORTED" ;  /*This  flag indicates that all DAQ lists can be put in RESUME mode. */
            "STORE_DAQ_SUPPORTED" ;  /*This flag indicates that the slave can store DAQ configurations. */
            block "STIM" struct {
              enum {
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE" = 1,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD" = 2,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD" = 4,
                "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG" = 8
              };  /* Granularity for size of ODT entry direction STIM*/
              uchar;  /* MAX_ODT_ENTRY_SIZE_STIM Maximum size of ODT entry (DIRECTION = STIM)*/
              taggedstruct {
                "BIT_STIM_SUPPORTED" ;  /*The flag indicates  whether  bitwise  data  stimulation  through BIT_OFFSET in WRITE_DAQ is supported.*/
                "MIN_ST_STIM" uchar;  /*Separation time between DTOs time in units of 100 microseconds*/
              };
            };
            block "TIMESTAMP_SUPPORTED" struct {
              uint;  /*The timestamp will increment by TIMESTAMP_TICKS per unit and wrap around if an overflow occurs. */
              enum {
                "NO_TIME_STAMP" = 0,
                "SIZE_BYTE" = 1,
                "SIZE_WORD" = 2,
                "SIZE_DWORD" = 4
              };  /*Timestamp size in bytes*/
              enum {
                "UNIT_1NS" = 0,
                "UNIT_10NS" = 1,
                "UNIT_100NS" = 2,
                "UNIT_1US" = 3,
                "UNIT_10US" = 4,
                "UNIT_100US" = 5,
                "UNIT_1MS" = 6,
                "UNIT_10MS" = 7,
                "UNIT_100MS" = 8,
                "UNIT_1S" = 9,
                "UNIT_1PS" = 10,
                "UNIT_10PS" = 11,
                "UNIT_100PS" = 12
              };  /*Ticks per unit*/
              taggedstruct {
                "TIMESTAMP_FIXED" ;
              };  /* TIMESTAMP_FIXED flag indicates that the Slave always will send DTO Packets in time stamped mode. */
            };
            "PID_OFF_SUPPORTED" ;  /*Flag in DAQ_PROPERTIES indicates that transfer of DTO Packets without Identification Field is possible. */
            (block "DAQ_LIST" struct {
              uint;  /* DAQ_LIST_NUMBER  is in the range [0,1,..MIN_DAQ-1]. */
              taggedstruct {
                "DAQ_LIST_TYPE" enum {
                  "DAQ" = 1,
                  "STIM" = 2,
                  "DAQ_STIM" = 3
                };  /* DAQ: DIRECTION = DAQ only 
 STIM: DIRECTION = STIM only 
 DAQ_STIM: both directions are possible */
                "MAX_ODT" uchar;  /*Number of ODTs in this DAQ list */
                "MAX_ODT_ENTRIES" uchar;  /*Maximum number of entries in an ODT*/
                "FIRST_PID" uchar;  /*FIRST_PID: Is the PID in the DTO Packet of the first ODT transferred by this DAQ list.*/
                "EVENT_FIXED" uint;  /*The flag indicates that the Event Channel for this DAQ list can not be changed. */
                block "PREDEFINED" taggedstruct {
                  (block "ODT" struct {
                    uchar;  /* ODT number */
                    taggedstruct {
                      ("ODT_ENTRY" struct {
                        uchar;  /* ODT_ENTRY number */
                        ulong;  /* address of element */
                        uchar;  /* address extension of element */
                        uchar;  /* size of element [AG] */
                        uchar;  /* BIT_OFFSET */
                      })*;
                    };
                  })*;
                };  /*PREDEFINED;The DAQ list is predefined and fixed in the slave devices memory.*/
              };
            })*;
            (block "EVENT" struct {
              char[101];  /* EVENT_CHANNEL_NAME*/
              char[9];  /* EVENT_CHANNEL_SHORT_NAME*/
              uint;  /* EVENT_CHANNEL_NUMBER*/
              enum {
                "DAQ" = 1,
                "STIM" = 2,
                "DAQ_STIM" = 3
              };  /* DAQ: only DAQ_LISTs with DIRECTION = DAQ
 STIM: only DAQ_LISTs with DIRECTION = STIM
 DAQ_STIM both kind of DAQ_LISTs*/
              uchar;  /* MAX_DAQ_LIST:Maximum number of DAQ lists in this event channel*/
              uchar;  /* TIME_CYCLE: Event channel time cycle*/
              uchar;  /* TIME_UNIT: Event channel time unit*/
              uchar;  /* PRIORITY:The event channel with event channel priority = FF has the highest priority */
              taggedstruct {
                "COMPLEMENTARY_BYPASS_EVENT_CHANNEL_NUMBER" uint;  /*This keyword is used to make a combination of two event channels building a bypassing raster.*/
                "CONSISTENCY" enum {
                  "DAQ" = 0,
                  "EVENT" = 1
                };  /*With this keyword, the slave can indicate what kind of data consistency exists when data are processed within this Event.*/
              };
            })*;
          };
        };

        taggedunion Daq_Event {
          "FIXED_EVENT_LIST" taggedstruct {
            ("EVENT" uint)*;
          };
          "VARIABLE" taggedstruct {
            block "AVAILABLE_EVENT_LIST" taggedstruct {
              ("EVENT" uint)*;
            };
            block "DEFAULT_EVENT_LIST" taggedstruct {
              ("EVENT" uint)*;
            };
          };
        };  /*This are characteristic for measurement objects*/

        struct Pag {
          uchar;  /* MAX_SEGMENTS: Is the total number of segments in the slave device*/
          taggedstruct {
            "FREEZE_SUPPORTED" ;  /*This flag indicates that all SEGMENTS can be put in FREEZE */
          };
        };

        struct Pgm {
          enum {
            "PGM_MODE_ABSOLUTE" = 1,
            "PGM_MODE_FUNCTIONAL" = 2,
            "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3
          };  /*The  ABSOLUTE_MODE  and  FUNCTIONAL_MODE  flags  indicate  the  clear/programming mode that can be used */
          uchar;  /* MAX_SECTORS: Total number of available sectors */
          uchar;  /* MAX_CTO_PGM: Maximum CTO size for PGM */
          taggedstruct {
            (block "SECTOR" struct {
              char[101];  /* SECTOR_NAME */
              uchar;  /* SECTOR_NUMBER*/
              ulong;  /* Start address for this SECTOR */
              ulong;  /* Length of this SECTOR [AG] */
              uchar;  /* CLEAR_SEQUENCE_NUMBER: The Clear Sequence Number describe, in which subsequential order the master has to clear and program flash memory sectors.*/
              uchar;  /* PROGRAM_SEQUENCE_NUMBER: The Program Sequence Number describe, in which subsequential order the master has to clear and program flash memory sectors.*/
              uchar;  /* PROGRAM_METHOD: The work flow depends on mode  absolute access or functional access*/
            })*;
            "COMMUNICATION_MODE_SUPPORTED" taggedunion {
              "BLOCK" taggedstruct {
                "SLAVE" ;  /*This flag indicates whether the Slave Block Mode is available during Programming. */
                "MASTER" struct {
                  uchar;  /* MAX_BS_PGM:MAX_BS: indicates the maximum allowed block size as the number of consecutive command packets in a block sequence*/
                  uchar;  /* MIN_ST_PGM ndicates the required minimum separation time between the packets of a block transfer from the master device to the slave device in units of 100 ms*/
                };  /*This flag indicates whether the Master Block Mode is available */
              };
              "INTERLEAVED" uchar;  /* QUEUE_SIZE_PGM: This value describe the total count of bytes for this queue*/
            };
          };
        };

        struct Segment {
          uchar;  /* SEGMENT_NUMBER: Logical data segment number*/
          uchar;  /* Total number of available pages */
          uchar;  /* ADDRESS_EXTENSION: Address extension for this SEGMENT*/
          uchar;  /* COMPRESSION_METHOD: The COMPRESSION_x flags indicate which compression state of the incoming data the slave can process*/
          uchar;  /* ENCRYPTION_METHOD: The  ENCRYPTION_x flags indicate which encryption state of the incoming data the slave can process.*/
          taggedstruct {
            block "CHECKSUM" struct {
              enum {
                "XCP_ADD_11" = 1,
                "XCP_ADD_12" = 2,
                "XCP_ADD_14" = 3,
                "XCP_ADD_22" = 4,
                "XCP_ADD_24" = 5,
                "XCP_ADD_44" = 6,
                "XCP_CRC_16" = 7,
                "XCP_CRC_16_CITT" = 8,
                "XCP_CRC_32" = 9,
                "XCP_USER_DEFINED" = 255
              };  /* Checksum type*/
              taggedstruct {
                "MAX_BLOCK_SIZE" ulong;  /* Maximum block size for checksum calculation */
                "EXTERNAL_FUNCTION" char[256];  /* Name of the Checksum.DLL */
              };
            };
            (block "PAGE" struct {
              uchar;  /* PAGE_NUMBER: Logical page number*/
              enum {
                "ECU_ACCESS_NOT_ALLOWED" = 0,
                "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1,
                "ECU_ACCESS_WITH_XCP_ONLY" = 2,
                "ECU_ACCESS_DONT_CARE" = 3
              };  /*The ECU_ACCESS_x  flags indicate whether and how the ECU can access this page.*/
              enum {
                "XCP_READ_ACCESS_NOT_ALLOWED" = 0,
                "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1,
                "XCP_READ_ACCESS_WITH_ECU_ONLY" = 2,
                "XCP_READ_ACCESS_DONT_CARE" = 3
              };  /*The XCP_x_ACCESS_y flags indicate whether and how the XCP master can access this page.*/
              enum {
                "XCP_WRITE_ACCESS_NOT_ALLOWED" = 0,
                "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1,
                "XCP_WRITE_ACCESS_WITH_ECU_ONLY" = 2,
                "XCP_WRITE_ACCESS_DONT_CARE" = 3
              };  /*The XCP_WRITE_ACCESS_x flags indicate whether the  X CP master can write to this PAGE*/
              taggedstruct {
                "INIT_SEGMENT" uchar;  /* references segment that initialises this page */
              };
            })*;  /* PAGES for this SEGMENT */
            (block "ADDRESS_MAPPING" struct {
              ulong;  /* source address */
              ulong;  /* destination address */
              ulong;  /* length */
            })*;
            "PGM_VERIFY" ulong;  /* verification value for PGM */
          };
        };  /*Settings for MEMORY_SEGMENT */

        taggedstruct Common_Parameters {
          block "PROTOCOL_LAYER" struct Protocol_Layer;
          block "SEGMENT" struct Segment;
          block "DAQ" struct Daq;
          block "PAG" struct Pag;
          block "PGM" struct Pgm;
          block "DAQ_EVENT" taggedunion Daq_Event;
        };

        struct CAN_Parameters {
          uint;  /* XCP on CAN version, currently 0x0101 */
          taggedstruct {
            "CAN_ID_BROADCAST" ulong;  /* Auto-detection CAN-ID */
            "CAN_ID_MASTER" ulong;  /* CMD/STIM CAN-ID */
            "CAN_ID_MASTER_INCREMENTAL" ;  /* Master uses range of CAN-IDs. Start of range = CAN_ID_MASTER*/
            "CAN_ID_SLAVE" ulong;  /* RES/ERR/EV/SERV/DAQ CAN-ID */
            "BAUDRATE" ulong;  /* Baudrate in Hz */
            "SAMPLE_POINT" uchar;  /* Sample point in % of bit time */
            "SAMPLE_RATE" enum {
              "SINGLE" = 1,
              "TRIPLE" = 3
            };  /* Sample per bit */
            "BTL_CYCLES" uchar;  /* slots per bit time */
            "SJW" uchar;  /*Length synchr. segment */
            "SYNC_EDGE" enum {
              "SINGLE" = 1,
              "DUAL" = 2
            };  /* SINGLE: on falling edge only
 DUAL: on falling and rising edge*/
            "MAX_DLC_REQUIRED" ;  /* master to slave frames always to have DLC = MAX_DLC = 8*/
            (block "DAQ_LIST_CAN_ID" struct {
              uint;  /* reference to DAQ_LIST_NUMBER */
              taggedstruct {
                "VARIABLE" ;
                "FIXED" ulong;  /* this DAQ_LIST always on this CAN_ID */
              };  /* exclusive tags: either VARIABLE or FIXED */
            })*;
          };
        };

        struct SxI_Parameters {
          uint;  /* XCP on SxI version, currently 0x0101 */
          ulong;  /* BAUDRATE [Hz] */
          taggedstruct {
            "ASYNCH_FULL_DUPLEX_MODE" struct {
              enum {
                "PARITY_NONE" = 0,
                "PARITY_ODD" = 1,
                "PARITY_EVEN" = 2
              };  /* Parity bit settings*/
              enum {
                "ONE_STOP_BIT" = 1,
                "TWO_STOP_BITS" = 2
              };  /*Stop bit settings*/
              taggedstruct {
                block "FRAMING" struct {
                  uchar;  /* SYNC character*/
                  uchar;  /* ESC character*/
                };
              };  /* Support for framing mechanism*/
            };
            "SYNCH_FULL_DUPLEX_MODE_BYTE" ;
            "SYNCH_FULL_DUPLEX_MODE_WORD" ;
            "SYNCH_FULL_DUPLEX_MODE_DWORD" ;
            "SYNCH_MASTER_SLAVE_MODE_BYTE" ;
            "SYNCH_MASTER_SLAVE_MODE_WORD" ;
            "SYNCH_MASTER_SLAVE_MODE_DWORD" ;
          };  /* exclusive tags*/
          enum {
            "HEADER_LEN_BYTE" = 0,
            "HEADER_LEN_CTR_BYTE" = 1,
            "HEADER_LEN_FILL_BYTE" = 2,
            "HEADER_LEN_WORD" = 3,
            "HEADER_LEN_CTR_WORD" = 4,
            "HEADER_LEN_FILL_WORD" = 5
          };  /* XCP packet header */
          enum {
            "NO_CHECKSUM" = 0,
            "CHECKSUM_BYTE" = 1,
            "CHECKSUM_WORD" = 2
          };  /* Checksum type*/
        };

        struct TCP_IP_Parameters {
          uint;  /* XCP on TCP_IP version, currently 0x0100 */
          uint;  /* PORT */
          taggedunion {
            "HOST_NAME" char[256];  /*Name of the host like localhost*/
            "ADDRESS" char[15];  /* IP address like 127.0.0.1*/
          };
        };

        struct UDP_IP_Parameters {
          uint;  /* XCP on UDP version, currently 0x0100 */
          uint;  /* PORT */
          taggedunion {
            "HOST_NAME" char[256];  /*Name of the host like localhost*/
            "ADDRESS" char[15];  /* IP address like 127.0.0.1*/
          };
        };

        struct ep_parameters {
          uchar;  /* ENDPOINT_NUMBER, not endpoint address */
          enum {
            "BULK_TRANSFER" = 2,
            "INTERRUPT_TRANSFER" = 3
          };
          uint;  /* wMaxPacketSize: Maximum packet  
 size of endpoint in bytes       */
          uchar;  /* bInterval: polling of endpoint  */
          enum {
            "MESSAGE_PACKING_SINGLE" = 0,
            "MESSAGE_PACKING_MULTIPLE" = 1,
            "MESSAGE_PACKING_STREAMING" = 2
          };  /* Packing of XCP Messages         
 SINGLE: Single per USB data packet    
 MULTIPLE: Multiple per USB data packet  
 STREAMING: No restriction by packet sizes*/
          enum {
            "ALIGNMENT_8_BIT" = 0,
            "ALIGNMENT_16_BIT" = 1,
            "ALIGNMENT_32_BIT" = 2,
            "ALIGNMENT_64_BIT" = 3
          };  /* Alignment mandatory for all packing types*/
          taggedstruct {
            "RECOMMENDED_HOST_BUFSIZE" uint;  /* Recommended size for the host 
 buffer size. The size is defined
 as multiple of wMaxPacketSize.  */
          };
        };

        struct USB_Parameters {
          uint;  /* XCP on USB version  
 e.g. "1.0" = 0x0100 */
          uint;  /* Vendor ID                       */
          uint;  /* Product ID                      */
          uchar;  /* Number of interface             */
          enum {
            "HEADER_LEN_BYTE" = 0,
            "HEADER_LEN_CTR_BYTE" = 1,
            "HEADER_LEN_FILL_BYTE" = 2,
            "HEADER_LEN_WORD" = 3,
            "HEADER_LEN_CTR_WORD" = 4,
            "HEADER_LEN_FILL_WORD" = 5
          };  /* XCP packet header */
          taggedunion {
            block "OUT_EP_CMD_STIM" struct ep_parameters;  /* OUT-EP for CMD and STIM (if not specified otherwise)*/
          };
          taggedunion {
            block "IN_EP_RESERR_DAQ_EVSERV" struct ep_parameters;  /* IN-EP for RES/ERR, 
 DAQ (if not specified otherwise) and  
 EV/SERV (if not specified otherwise)  */
          };
          taggedstruct {
            "ALTERNATE_SETTING_NO" uchar;  /* Number of alternate setting   */
            "INTERFACE_STRING_DESCRIPTOR" char[101];  /* String Descriptor of XCP interface*/
            (block "OUT_EP_ONLY_STIM" struct ep_parameters)*;  /* multiple OUT-EP's for STIM */
            (block "IN_EP_ONLY_DAQ" struct ep_parameters)*;  /* multiple IN-EP's for DAQ*/
            block "IN_EP_ONLY_EVSERV" struct ep_parameters;  /* only one IN-EP for EV/SERV*/
            (block "DAQ_LIST_USB_ENDPOINT" struct {
              uint;  /* reference to DAQ_LIST_NUMBER          */
              taggedstruct {
                "FIXED_IN" uchar;  /* this DAQ list always                
 ENDPOINT_NUMBER, not endpoint address */
                "FIXED_OUT" uchar;  /* this STIM list always               
 ENDPOINT_NUMBER, not endpoint address */
              };
            })*;
          };
        };

        enum packet_assignment_type {
          "NOT_ALLOWED" = 0,
          "FIXED" = 1,
          "VARIABLE_INITIALISED" = 2,
          "VARIABLE" = 3
        };

        struct buffer {
          uchar;  /* Buffer number*/
          taggedstruct {
            "MAX_FLX_LEN_BUF" taggedunion {
              "FIXED" uchar;  /* constant value, can't be modified on runtime */
              "VARIABLE" uchar;  /* initial value, can be modified on runtime*/
            };  /* maximal size of the buffer [byte]*/
            block "LPDU_ID" taggedstruct {
              "FLX_SLOT_ID" taggedunion {
                "FIXED" uint;  /* constant value, can't be modified on runtime*/
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uint;
                };  /* initial value, can be modified on runtime*/
              };  /* FlexRay timing, slot id*/
              "OFFSET" taggedunion {
                "FIXED" uchar;  /* constant value, can't be modified on runtime*/
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uchar;
                };  /* initial value, can be modified on runtime*/
              };  /* FlexRay timing, base cycle*/
              "CYCLE_REPETITION" taggedunion {
                "FIXED" uchar;  /* constant value, can't be modified on runtime*/
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" uchar;
                };  /* initial value, can be modified on runtime*/
              };  /* FlexRay timing, cycle repetition*/
              "CHANNEL" taggedunion {
                "FIXED" enum {
                  "A" = 0,
                  "B" = 1
                };  /* constant value, can't be modified on runtime*/
                "VARIABLE" taggedstruct {
                  "INITIAL_VALUE" enum {
                    "A" = 0,
                    "B" = 1
                  };
                };  /* initial value, can be modified on runtime*/
              };  /* FlexRay Channel A or B*/
            };  /* LPDU-ID,  Data  Link  Layer  Protocol  Data  Unit  Identifier*/
            block "XCP_PACKET" taggedstruct {
              "CMD" enum packet_assignment_type;
              "RES_ERR" enum packet_assignment_type;
              "EV_SERV" enum packet_assignment_type;
              "DAQ" enum packet_assignment_type;
              "STIM" enum packet_assignment_type;
            };  /* XCP packet type*/
          };
        };

        struct FLX_Parameters {
          uint;  /* XCP on FlexRay version
 e.g. "1.0" = 0x0100*/
          uint;  /* T1_FLX [ms] Time-out while waiting for an XCP on FlexRay response
 e.g. FLX_ASSIGN*/
          char[256];  /* FIBEX-file with extension and without path, including CHI information*/
          char[256];  /* cluster-ID, id attribute of the FIBEX cluster*/
          uchar;  /* NAX, node address of the ECU*/
          enum {
            "HEADER_NAX" = 0,
            "HEADER_NAX_FILL" = 1,
            "HEADER_NAX_CTR" = 2,
            "HEADER_NAX_FILL3" = 3,
            "HEADER_NAX_CTR_FILL2" = 4,
            "HEADER_NAX_LEN" = 5,
            "HEADER_NAX_CTR_LEN" = 6,
            "HEADER_NAX_FILL2_LEN" = 7,
            "HEADER_NAX_CTR_FILL_LEN" = 8
          };  /* header type of the XCP on FlexRay message*/
          enum {
            "PACKET_ALIGNMENT_8" = 0,
            "PACKET_ALIGNMENT_16" = 1,
            "PACKET_ALIGNMENT_32" = 2
          };  /* XCP packet alignment within the XCP on FlexRay Message*/
          taggedunion {
            block "INITIAL_CMD_BUFFER" struct buffer;
          };  /* XCP dedicated buffer used to transmit XCP commands*/
          taggedunion {
            block "INITIAL_RES_ERR_BUFFER" struct buffer;
          };  /* XCP dedicated buffer used to receive the responses on the XCP commands*/
          taggedstruct {
            (block "POOL_BUFFER" struct buffer)*;
          };  /* XCP dedicated buffer(s) used for XCP-DAQ, -STIM and -EV/SERV*/
        };
      block "IF_DATA" taggedunion {
        "CANAPE_EXT" struct {
          int;  /* version number */
          taggedstruct {
            "LINK_MAP" struct {
              char[256];  /* segment name */
              long;  /* base address of the segment */
              uint;  /* address extension of the segment */
              uint;  /* flag: address is relative to DS */
              long;  /* offset of the segment address */
              uint;  /* datatypValid */
              uint;  /* enum datatyp */
              uint;  /* bit offset of the segment */
            };
            "DISPLAY" struct {
              long;  /* display color */
              double;  /* minimal display value (phys)*/
              double;  /* maximal display value (phys)*/
            };
            "VIRTUAL_CONVERSION" struct {
              char[256];  /* name of the conversion formula */
            };
          };
        };
        "CANAPE_MODULE" struct {
          taggedstruct {
            ("RECORD_LAYOUT_STEPSIZE" struct {
              char[256];  /* name of record layout*/
              uint;  /* stepsize for FNC_VALUES */
              uint;  /* stepsize for AXIS_PTS_X */
              uint;  /* stepsize for AXIS_PTS_Y */
              uint;  /* stepsize for AXIS_PTS_Z */
              uint;  /* stepsize for AXIS_PTS_4 */
              uint;  /* stepsize for AXIS_PTS_5 */
            })*;
          };
        };
        "CANAPE_ADDRESS_UPDATE" taggedstruct {
          ("EPK_ADDRESS" struct {
            char[1024];  /* name of the corresponding symbol in MAP file */
            long;  /* optional address offset */
          })*;
          "ECU_CALIBRATION_OFFSET" struct {
            char[1024];  /* name of the corresponding symbol in MAP file */
            long;  /* optional address offset */
          };
          (block "CALIBRATION_METHOD" taggedunion {
            "AUTOSAR_SINGLE_POINTERED" struct {
              char[1024];  /* MAP symbol name for pointer table in RAM */
              long;  /* optional address offset */
              taggedstruct {
                "ORIGINAL_POINTER_TABLE" struct {
                  char[1024];  /* MAP symbol name for pointer table in FLASH */
                  long;  /* optional address offset */
                };
              };
            };
            "InCircuit2" struct {
              char[1024];  /* MAP symbol name for pointer table in RAM */
              long;  /* optional address offset */
              taggedstruct {
                "ORIGINAL_POINTER_TABLE" struct {
                  char[1024];  /* MAP symbol name for pointer table in FLASH */
                  long;  /* optional address offset */
                };
                "FLASH_SECTION" struct {
                  ulong;  /* start address of flash section */
                  ulong;  /* length of flash section */
                };
              };
            };
          })*;
          block "MAP_SYMBOL" taggedstruct {
            "FIRST" struct {
              char[1024];  /* symbol name of the corresponding segment in MAP file */
              long;  /* offset */
            };
            "LAST" struct {
              char[1024];  /* symbol name of the corresponding segment in MAP file */
              long;  /* offset */
            };
            ("ADDRESS_MAPPING_XCP" struct {
              char[1024];  /* symbol name of source range in MAP file */
              char[1024];  /* symbol name of destination range in MAP file */
            })*;
          };
          (block "MEMORY_SEGMENT" struct {
            char[1024];  /* name of the memory segment */
            taggedstruct {
              "FIRST" struct {
                char[1024];  /* symbol name of the corresponding segment in MAP file */
                long;  /* offset */
              };
              "LAST" struct {
                char[1024];  /* symbol name of the corresponding segment in MAP file */
                long;  /* offset */
              };
              ("ADDRESS_MAPPING_XCP" struct {
                char[1024];  /* symbol name of source range in MAP file */
                char[1024];  /* symbol name of destination range in MAP file */
              })*;
            };
          })*;
        };
        "CANAPE_GROUP" taggedstruct {
          block "STRUCTURE_LIST" (char[1024])*;
        };
        "XCP" struct {
          taggedstruct Common_Parameters;  /* default parameters */
          taggedstruct {
            block "XCP_ON_CAN" struct {
              struct CAN_Parameters;  /* specific for CAN */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_SxI" struct {
              struct SxI_Parameters;  /* specific for SxI */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_TCP_IP" struct {
              struct TCP_IP_Parameters;  /* specific for TCP_IP */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_UDP_IP" struct {
              struct UDP_IP_Parameters;  /* specific for UDP */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_USB" struct {
              struct USB_Parameters;  /* specific for USB      */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
            block "XCP_ON_FLX" struct {
              struct FLX_Parameters;  /* specific for FlexRay  */
              taggedstruct Common_Parameters;  /* overruling of default */
            };
          };  /* transport layer parameters*/
        };
        "XCPplus" struct {
          uint;  /* XCP plus AML structure version */
          taggedstruct Common_Parameters;  /* default parameters */
          taggedstruct {
            (block "XCP_ON_CAN" struct {
              struct CAN_Parameters;  /* specific for CAN */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_SxI" struct {
              struct SxI_Parameters;  /* specific for SxI */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_TCP_IP" struct {
              struct TCP_IP_Parameters;  /* specific for TCP_IP */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_UDP_IP" struct {
              struct UDP_IP_Parameters;  /* specific for UDP */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_USB" struct {
              struct USB_Parameters;  /* specific for USB */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
            (block "XCP_ON_FLX" struct {
              struct FLX_Parameters;  /* specific for FlexRay */
              taggedstruct Common_Parameters;  /* overruling of default */
              taggedstruct {
                "TRANSPORT_LAYER_INSTANCE" char[101];  /* name of the transport layer instance */
              };
            })*;
          };  /* transport layer specific parameters */
        };
      };
    /end A2ML

    /begin MOD_PAR ""
      /begin MEMORY_SEGMENT
        CALRAM "" VARIABLES RAM INTERN 0x25014 0xDF -1 -1 -1 -1 -1
        /begin IF_DATA XCP
          /begin SEGMENT
            0xFF
            0x01
            0x00
            0x00
            0x00
            /begin PAGE
              0x00
              ECU_ACCESS_DONT_CARE
              XCP_READ_ACCESS_DONT_CARE
              XCP_WRITE_ACCESS_DONT_CARE
              INIT_SEGMENT 0x00
            /end PAGE
            /begin ADDRESS_MAPPING
              0x025014
              0x025014
              0xDF
            /end ADDRESS_MAPPING
            /begin ADDRESS_MAPPING
              0x025014
              0x00
              0xDF
            /end ADDRESS_MAPPING
          /end SEGMENT
        /end IF_DATA
      /end MEMORY_SEGMENT
    /end MOD_PAR

    /begin MOD_COMMON ""
      BYTE_ORDER MSB_LAST
      ALIGNMENT_BYTE 1
      ALIGNMENT_WORD 1
      ALIGNMENT_LONG 1
      ALIGNMENT_FLOAT16_IEEE 1
      ALIGNMENT_FLOAT32_IEEE 1
      ALIGNMENT_FLOAT64_IEEE 1
      ALIGNMENT_INT64 1
    /end MOD_COMMON

    /begin IF_DATA CANAPE_ADDRESS_UPDATE
    /end IF_DATA

    /begin IF_DATA XCP
      /begin PROTOCOL_LAYER
        0x0101
        0x012C
        0x2710
        0x00
        0x00
        0x00
        0x00
        0x00
        0xFA
        0x05BC
        BYTE_ORDER_MSB_LAST
        ADDRESS_GRANULARITY_BYTE
        OPTIONAL_CMD ALLOC_ODT_ENTRY
        OPTIONAL_CMD ALLOC_ODT
        OPTIONAL_CMD ALLOC_DAQ
        OPTIONAL_CMD FREE_DAQ
        OPTIONAL_CMD GET_DAQ_RESOLUTION_INFO
        OPTIONAL_CMD GET_DAQ_PROCESSOR_INFO
        OPTIONAL_CMD GET_DAQ_CLOCK
        OPTIONAL_CMD START_STOP_SYNCH
        OPTIONAL_CMD START_STOP_DAQ_LIST
        OPTIONAL_CMD GET_DAQ_LIST_MODE
        OPTIONAL_CMD SET_DAQ_LIST_MODE
        OPTIONAL_CMD WRITE_DAQ
        OPTIONAL_CMD SET_DAQ_PTR
        OPTIONAL_CMD CLEAR_DAQ_LIST
        OPTIONAL_CMD DOWNLOAD
        OPTIONAL_CMD UPLOAD
        OPTIONAL_CMD SET_MTA
        OPTIONAL_CMD GET_COMM_MODE_INFO
      /end PROTOCOL_LAYER
      /begin DAQ
        DYNAMIC
        0x00
        0x02
        0x00
        OPTIMISATION_TYPE_DEFAULT
        ADDRESS_EXTENSION_FREE
        IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE
        GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE
        0xB6
        OVERLOAD_INDICATION_PID
        /begin TIMESTAMP_SUPPORTED
          0x01
          SIZE_DWORD
          UNIT_1NS
          TIMESTAMP_FIXED
        /end TIMESTAMP_SUPPORTED
        /begin EVENT
          "Event1"
          "Event1"
          0x01
          DAQ
          0xFF
          0x01
          0x06
          0x00
        /end EVENT
        /begin EVENT
          "Event2"
          "Event2"
          0x02
          DAQ
          0xFF
          0x01
          0x06
          0x00
        /end EVENT
      /end DAQ
      /begin PAG
        0x01
      /end PAG
      /begin PGM
        PGM_MODE_ABSOLUTE
        0x00
        0x00
      /end PGM
      /begin XCP_ON_TCP_IP
        0x0100
        0x15B3
        ADDRESS "127.0.0.1"
      /end XCP_ON_TCP_IP
      /begin XCP_ON_UDP_IP
        0x0100
        0x15B3
        ADDRESS "172.31.31.194"
      /end XCP_ON_UDP_IP
    /end IF_DATA

    /begin TYPEDEF_MEASUREMENT _uint64 ""
      A_UINT64 NO_COMPU_METHOD 0 0 0 1.84467440737E+19
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_STRUCTURE ecu ""
      0x10
      SYMBOL_TYPE_LINK "ecu"
      /begin STRUCTURE_COMPONENT
        counter uint32
        0
        SYMBOL_TYPE_LINK "counter"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        pCounter uint32
        4
        ADDRESS_TYPE PLONG
        SYMBOL_TYPE_LINK "pCounter"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        byte ubyte
        8
        SYMBOL_TYPE_LINK "byte"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        word ushort
        10
        SYMBOL_TYPE_LINK "word"
      /end STRUCTURE_COMPONENT
      /begin STRUCTURE_COMPONENT
        dword uint32
        12
        SYMBOL_TYPE_LINK "dword"
      /end STRUCTURE_COMPONENT
    /end TYPEDEF_STRUCTURE

    /begin TYPEDEF_MEASUREMENT ubyte ""
      UBYTE NO_COMPU_METHOD 0 0 0 255
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT uint32 ""
      ULONG NO_COMPU_METHOD 0 0 0 4294967295
    /end TYPEDEF_MEASUREMENT

    /begin TYPEDEF_MEASUREMENT ushort ""
      UWORD NO_COMPU_METHOD 0 0 0 65535
    /end TYPEDEF_MEASUREMENT

    /begin MEASUREMENT BitSlice "Testsignal: 4 Bit on a byte boundary"
      UWORD BitSlice.CONVERSION 0 0 0 15
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E044
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 15
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT BitSlice0 "Testsignal: 5 Bit"
      UWORD BitSlice.CONVERSION 0 0 0 31
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E044
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 31
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT BitSlice1 "Testsignal: 5 Bit "
      UWORD BitSlice.CONVERSION 0 0 0 31
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E044
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 31
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT BitSlice2 "Testsignal: 5 Bit "
      UWORD BitSlice.CONVERSION 0 0 0 63
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E045
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 1
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 1 1 0x8F 0
        DISPLAY 0x0 0 31
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC CALRAM_LAST ""
      VALUE 0x271D0 __UWORD_S._Copy1 0 NO_COMPU_METHOD 0 65535
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 65535
      FORMAT "%.15"
      SYMBOL_LINK "CALRAM_LAST" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "CALRAM_LAST" 0x271D0 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 65535
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC CALRAM_SIGN ""
      VALUE 0x271CC __ULONG_S._Copy1 0 NO_COMPU_METHOD 0 4294967295
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 4294967295
      FORMAT "%.15"
      SYMBOL_LINK "CALRAM_SIGN" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "CALRAM_SIGN" 0x271CC 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 4294967295
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC CALRAM_START ""
      VALUE 0x27014 __UWORD_S._Copy1 0 NO_COMPU_METHOD 0 65535
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 65535
      FORMAT "%.15"
      SYMBOL_LINK "CALRAM_START" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "CALRAM_START" 0x27014 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 65535
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT Counter_B4 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Counter_B5 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Counter_B6 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Counter_B7 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin AXIS_PTS Curve1 "Curve used as axis"
      0x27190 NO_INPUT_QUANTITY SSV__UBYTE_S._Copy1 0 BitSlice.CONVERSION 8 0 255
      BYTE_ORDER MSB_LAST
      DEPOSIT ABSOLUTE
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "curve1_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "curve1_8_uc" 0x27190 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end AXIS_PTS

    /begin MEASUREMENT DtChannel1 "Time jitter of channel1"
      FLOAT32_IEEE DtChannel1.CONVERSIONV 0 0 0 100
      BYTE_ORDER MSB_LAST
      FORMAT "%.3"
      /begin VIRTUAL
        channel1 
      /end VIRTUAL
      /begin IF_DATA CANAPE_EXT
        100
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT FW1 "Testparameter"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704E
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byte4" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byte4" 0x2704E 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC KF2 "8*8 BYTE shared axis Curve1/Curve1"
      MAP 0x2706C __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        COM_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        AXIS_PTS_REF Curve1
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY KF2_Y_AXIS.CONVERSION 8 0 7
        EXTENDED_LIMITS 0 7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.2"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map1_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1_8_8_uc" 0x2706C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KF3 "8*6 BYTE no axis"
      MAP 0x2706C __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 7
        EXTENDED_LIMITS 0 7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.0"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 6 0 5
        EXTENDED_LIMITS 0 5
        FIX_AXIS_PAR_DIST 0 1 6
        FORMAT "%.0"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map1_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1_8_8_uc" 0x2706C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KF4 "8*6 BYTE shared axis Curve1"
      MAP 0x2706C __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        COM_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        AXIS_PTS_REF Curve1
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 6 0 5
        EXTENDED_LIMITS 0 5
        FIX_AXIS_PAR_DIST 0 1 6
        FORMAT "%.0"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map1_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1_8_8_uc" 0x2706C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KF5 "8*6 BYTE memory layout MapX8Y6V86ub"
      MAP 0x270EC MapX8Y6V86ub 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        STD_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        BYTE_ORDER MSB_LAST
        DEPOSIT ABSOLUTE
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        STD_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 6 0 255
        BYTE_ORDER MSB_LAST
        DEPOSIT ABSOLUTE
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map4_80_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map4_80_uc" 0x270EC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KF6 "8*8 BYTE no axis"
      MAP 0x2706C __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 7
        EXTENDED_LIMITS 0 7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.0"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 7
        EXTENDED_LIMITS 0 7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.0"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map1_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1_8_8_uc" 0x2706C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KF7 "8*8 BYTE memory layout MapV86ub, shared axis Curve1/Curve1"
      MAP 0x270AC MapV86ub 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        COM_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        AXIS_PTS_REF Curve1
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS NO_INPUT_QUANTITY KF2_Y_AXIS.CONVERSION 6 0 5
        EXTENDED_LIMITS 0 5
        FIX_AXIS_PAR_DIST 0 1 6
        FORMAT "%.2"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map2_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map2_8_8_uc" 0x270AC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KL1 "16 BYTE curve"
      VAL_BLK 0x271BC __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      MATRIX_DIM 16
      SYMBOL_LINK "curve5_16_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "curve5_16_uc" 0x271BC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT KL1Output "Value generated from curve KL1"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3BA54
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "curveOutput" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "curveOutput" 0x3BA54 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC KL2 "8 BYTE shared axis Curve2"
      VAL_BLK 0x27190 __UBYTE_Z._Copy1 0 BitSlice.CONVERSION 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      MATRIX_DIM 8
      SYMBOL_LINK "curve1_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "curve1_8_uc" 0x27190 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC KL5 "8 BYTE CurveV8ub shared axis Curve2"
      VAL_BLK 0x27190 CurveV8ub 0 BitSlice.CONVERSION 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      MATRIX_DIM 8
      SYMBOL_LINK "curve1_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "curve1_8_uc" 0x27190 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT MaxChannel1 "Maximum value of channel1"
      FLOAT32_IEEE MaxChannel1.CONVERSIONV 0 0 -100 100
      BYTE_ORDER MSB_LAST
      FORMAT "%.3"
      /begin VIRTUAL
        channel1 
      /end VIRTUAL
      /begin IF_DATA CANAPE_EXT
        100
        DISPLAY 0x0 -100 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT MinChannel1 "Minimum value of channel1"
      FLOAT32_IEEE MinChannel1.CONVERSIONV 0 0 -100 100
      BYTE_ORDER MSB_LAST
      FORMAT "%.3"
      /begin VIRTUAL
        channel1 
      /end VIRTUAL
      /begin IF_DATA CANAPE_EXT
        100
        DISPLAY 0x0 -100 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT PWM "Pulse width signal from PWM_level and Triangle"
      UBYTE HighLow 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x389CF
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.0"
      SYMBOL_LINK "bytePWM" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "bytePWM" 0x389CF 0 0 0 1 0x87 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT PWMFiltered "Low pass filtered PWM signal"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x39F5F
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "bytePWMFiltered" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "bytePWMFiltered" 0x39F5F 0 0 0 1 0x87 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT PWM_Level ""
      SBYTE BitSlice.CONVERSION 0 0 -50 50
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x27288
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.0"
      READ_WRITE
      SYMBOL_LINK "sbytePWMLevel" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "sbytePWMLevel" 0x27288 0 0 0 1 0xC7 0
        DISPLAY 0x0 -50 50
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT ShiftByte ""
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E04C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "byteShift" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteShift" 0x3E04C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Shifter_B0 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E04C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteShift" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteShift" 0x3E04C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Shifter_B1 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E04C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteShift" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteShift" 0x3E04C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Shifter_B2 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E04C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteShift" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteShift" 0x3E04C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Shifter_B3 "Single bit demo signal (bit from a byte shifting)"
      UBYTE HighLow 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E04C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byteShift" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteShift" 0x3E04C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 20
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT TestStatus "2 bit demo signal with symbolic conversion formula"
      UBYTE TestStatus.CONVERSION 0 0 0 3
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.0"
      READ_WRITE
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 3
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT Triangle "Triangle test signal used for PWM output PWM"
      SBYTE BitSlice.CONVERSION 0 0 -50 50
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3695A
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "sbyteTriangle" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "sbyteTriangle" 0x3695A 0 0 0 1 0xC7 0
        DISPLAY 0x0 -50 50
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC a0 "Digital Filter v=(vin*a0+v*b0)/c0"
      VALUE 0x27044 __UWORD_S._Copy1 0 DigitalFilterConversion 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 1
      FORMAT "%.3"
      SYMBOL_LINK "a" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "a" 0x27044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 1
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT ampl "Amplitude of channel 1-3 "
      FLOAT32_IEEE BitSlice.CONVERSION 0 0 0 200
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2703C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "ampl" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "ampl" 0x2703C 0 0 0 1 0x1 0
        DISPLAY 0x0 0 200
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC b0 "Digital Filter v=(vin*a0+v*b0)/c0"
      VALUE 0x27046 __UWORD_S._Copy1 0 DigitalFilterConversion 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 1
      FORMAT "%.3"
      SYMBOL_LINK "b" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "b" 0x27046 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 1
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT bit12Counter "Demo signal (12 bit, incrementing)"
      UWORD BitSlice.CONVERSION 0 0 0 4095
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E044
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 4096
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT byte1 "Demo, read and write possible"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704B
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byte1" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byte1" 0x2704B 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT byte2 "Demo, read and write possible"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byte2" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byte2" 0x2704C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT byte3 "Demo, read and write possible"
      SBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704D
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byte3" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byte3" 0x2704D 0 0 0 1 0xC7 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT byte4 "Demo, read and write possible"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704E
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "byte4" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byte4" 0x2704E 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC byteArray1 ""
      VAL_BLK 0x37EDC __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray1[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray1[0]" 0x37EDC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray10 ""
      VAL_BLK 0x3AF64 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray10[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray10[0]" 0x3AF64 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray11 ""
      VAL_BLK 0x35E68 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray11[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray11[0]" 0x35E68 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray12 ""
      VAL_BLK 0x37964 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray12[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray12[0]" 0x37964 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray13 ""
      VAL_BLK 0x3E5C8 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray13[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray13[0]" 0x3E5C8 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray14 ""
      VAL_BLK 0x3EB50 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray14[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray14[0]" 0x3EB50 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray15 ""
      VAL_BLK 0x3CA60 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray15[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray15[0]" 0x3CA60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray16 ""
      VAL_BLK 0x3D554 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray16[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray16[0]" 0x3D554 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray2 ""
      VAL_BLK 0x3CFD8 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray2[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray2[0]" 0x3CFD8 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray3 ""
      VAL_BLK 0x3B4DC __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray3[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray3[0]" 0x3B4DC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray4 ""
      VAL_BLK 0x3E050 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray4[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray4[0]" 0x3E050 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray5 ""
      VAL_BLK 0x3DACC __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray5[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray5[0]" 0x3DACC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray6 ""
      VAL_BLK 0x363E0 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray6[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray6[0]" 0x363E0 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray7 ""
      VAL_BLK 0x3F0C8 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray7[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray7[0]" 0x3F0C8 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray8 ""
      VAL_BLK 0x399E4 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray8[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray8[0]" 0x399E4 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC byteArray9 ""
      VAL_BLK 0x38454 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1400
      SYMBOL_LINK "byteArray9[0]" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteArray9[0]" 0x38454 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT byteCounter "Demo signal (byte, incrementing)"
      UBYTE BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x35E60
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "byteCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "byteCounter" 0x35E60 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT bytePWMFilter "Filter constant for PWM filter"
      UBYTE BitSlice.CONVERSION 0 0 0 100
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x2704A
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "bytePWMFilter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "bytePWMFilter" 0x2704A 0 0 0 1 0x87 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC c0 "Digital Filter v=(vin*a0+v*b0)/c0"
      VALUE 0x27048 __UWORD_S._Copy1 0 DigitalFilterConversion 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 1
      FORMAT "%.3"
      SYMBOL_LINK "c" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "c" 0x27048 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 1
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT channel1 "FLOAT demo signal (sine wave)"
      FLOAT32_IEEE NO_COMPU_METHOD 0 0 -1E+12 1E+12
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3BA58
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "channel1" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "channel1" 0x3BA58 0 0 0 1 0x1 0
        DISPLAY 0x0 -100 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT channel2 "FLOAT demo signal (sine wave)"
      FLOAT32_IEEE NO_COMPU_METHOD 0 0 -1E+12 1E+12
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3EB44
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "channel2" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "channel2" 0x3EB44 0 0 0 1 0x1 0
        DISPLAY 0x0 -100 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT channel3 "FLOAT demo signal (sine wave)"
      FLOAT32_IEEE NO_COMPU_METHOD 0 0 -100 100
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E048
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "channel3" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "channel3" 0x3E048 0 0 0 1 0x1 0
        DISPLAY 0x0 -100 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT channel4 ""
      FLOAT32_IEEE NO_COMPU_METHOD 0 0 -3.40282346639E+38 3.40282346639E+38
      ECU_ADDRESS 0x36960
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.15"
      SYMBOL_LINK "channel4" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "channel4" 0x36960 0 0 0 1 0x1 0
        DISPLAY 0x0 -3.40282346639E+38 3.40282346639E+38
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT dwordCounter "Demo signal (dword, incrementing)"
      ULONG BitSlice.CONVERSION 0 0 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x389D4
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "dwordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "dwordCounter" 0x389D4 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin INSTANCE ecu ""
      ecu 0x0
    /end INSTANCE

    /begin CHARACTERISTIC gDebugLevel ""
      VALUE 0x271E0 __UBYTE_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      SYMBOL_LINK "gDebugLevel" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "gDebugLevel" 0x271E0 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerCMD ""
      VALUE 0x271D4 __ULong_Value 0 NO_COMPU_METHOD 0 4294967295
      EXTENDED_LIMITS 0 4294967295
      SYMBOL_LINK "gTaskCycleTimerCMD" 0
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerECU ""
      VALUE 0x271D8 __ULong_Value 0 NO_COMPU_METHOD 0 4294967295
      EXTENDED_LIMITS 0 4294967295
      SYMBOL_LINK "gTaskCycleTimerECU" 0
    /end CHARACTERISTIC

    /begin CHARACTERISTIC gTaskCycleTimerECUpp ""
      VALUE 0x271DC __ULong_Value 0 NO_COMPU_METHOD 0 4294967295
      EXTENDED_LIMITS 0 4294967295
      SYMBOL_LINK "gTaskCycleTimerECUpp" 0
    /end CHARACTERISTIC

    /begin MEASUREMENT limit "Limit for channel1"
      FLOAT32_IEEE BitSlice.CONVERSION 0 0 -1E+12 1E+12
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x27040
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "limit" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "limit" 0x27040 0 0 0 1 0x1 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC longArray1 ""
      VAL_BLK 0x3BA60 __ULONG_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1024
      SYMBOL_LINK "longArray1" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "longArray1" 0x3BA60 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray2 ""
      VAL_BLK 0x39F60 __ULONG_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1024
      SYMBOL_LINK "longArray2" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "longArray2" 0x39F60 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray3 ""
      VAL_BLK 0x389DC __ULONG_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1024
      SYMBOL_LINK "longArray3" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "longArray3" 0x389DC 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC longArray4 ""
      VAL_BLK 0x36964 __ULONG_S._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.15"
      MATRIX_DIM 1024
      SYMBOL_LINK "longArray4" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "longArray4" 0x36964 0 0 0 1 0x9F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC map1 "8*8 BYTE shared axis Curve1/Curve1"
      MAP 0x2706C __UBYTE_Z._Copy1 0 map1Conversion 0 2550
      /begin AXIS_DESCR
        FIX_AXIS map1InputX map1Input_Conversion 8 -12.8 12.7
        EXTENDED_LIMITS -12.8 12.7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        FIX_AXIS map1InputY map1Input_Conversion 8 -12.8 12.7
        EXTENDED_LIMITS -12.8 12.7
        FIX_AXIS_PAR_DIST 0 1 8
        FORMAT "%.3"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 2550
      FORMAT "%.3"
      SYMBOL_LINK "map1_8_8_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1_8_8_uc" 0x2706C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin CHARACTERISTIC map1Counter ""
      VALUE 0x27068 __UBYTE_S._Copy1 0 BitSlice.CONVERSION 0 255
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map1Counter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1Counter" 0x27068 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT map1InputX ""
      UBYTE map1Input_Conversion 0 0 0 25.5
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x39F5C
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "map1InputX" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1InputX" 0x39F5C 0 0 0 1 0x87 0
        DISPLAY 0x0 0 7
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT map1InputY ""
      UBYTE map1Input_Conversion 0 0 0 25.5
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x389CE
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "map1InputY" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1InputY" 0x389CE 0 0 0 1 0x87 0
        DISPLAY 0x0 0 7
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT map1Output ""
      UBYTE map1Conversion 0 0 0 2550
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3EB40
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "map1Output" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map1Output" 0x3EB40 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC map4_80_uc "8*8 BYTE memory layout map4_80_uc"
      MAP 0x270EC MapX8Y8V88ub 0 BitSlice.CONVERSION 0 255
      /begin AXIS_DESCR
        STD_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        BYTE_ORDER MSB_LAST
        DEPOSIT ABSOLUTE
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      /begin AXIS_DESCR
        STD_AXIS NO_INPUT_QUANTITY BitSlice.CONVERSION 8 0 255
        BYTE_ORDER MSB_LAST
        DEPOSIT ABSOLUTE
        EXTENDED_LIMITS 0 255
        FORMAT "%.3"
      /end AXIS_DESCR
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      FORMAT "%.3"
      SYMBOL_LINK "map4_80_uc" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "map4_80_uc" 0x270EC 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT offset "Offset for channel1"
      FLOAT32_IEEE BitSlice.CONVERSION 0 0 -1E+12 1E+12
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x27280
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "offset" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "offset" 0x27280 0 0 0 1 0x1 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT period "Period of channel 1-3"
      FLOAT32_IEEE BitSlice.CONVERSION 0 0 0 100
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x27038
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "period" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "period" 0x27038 0 0 0 1 0x1 0
        DISPLAY 0x0 0 100
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT sbytePWMLevel ""
      SBYTE sbytePWMLevel.CONVERSION 0 0 0 255
      ECU_ADDRESS 0x27288
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.15"
      SYMBOL_LINK "sbytePWMLevel" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "sbytePWMLevel" 0x27288 0 0 0 1 0xC7 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin CHARACTERISTIC testString "vcv"
      ASCII 0x27008 __UBYTE_Z._Copy1 0 NO_COMPU_METHOD 0 255
      ECU_ADDRESS_EXTENSION 0x0
      EXTENDED_LIMITS 0 255
      NUMBER 10
      SYMBOL_LINK "testString" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "testString" 0x27008 0 0 0 1 0x87 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end CHARACTERISTIC

    /begin MEASUREMENT v "Digital Filter Outputvalue"
      UWORD DigitalFilterConversion 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x389D8
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "v" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "v" 0x389D8 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 1
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT vin "Digital Filter Inputvalue"
      UWORD DigitalFilterConversion 0 0 0 1
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x399DE
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      READ_WRITE
      SYMBOL_LINK "vin" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "vin" 0x399DE 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 1
      /end IF_DATA
    /end MEASUREMENT

    /begin MEASUREMENT wordCounter "Demo signal (word, incrementing)"
      UWORD BitSlice.CONVERSION 0 0 0 65535
      BYTE_ORDER MSB_LAST
      ECU_ADDRESS 0x3E044
      ECU_ADDRESS_EXTENSION 0x0
      FORMAT "%.3"
      SYMBOL_LINK "wordCounter" 0
      /begin IF_DATA CANAPE_EXT
        100
        LINK_MAP "wordCounter" 0x3E044 0 0 0 1 0x8F 0
        DISPLAY 0x0 0 255
      /end IF_DATA
    /end MEASUREMENT

    /begin COMPU_METHOD BitSlice.CONVERSION ""
      IDENTICAL "%6.2f" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD Current "Convert Voltage into Current"
      FORM "%7.3" ""
      /begin FORMULA
        "X*X*2"
      /end FORMULA
    /end COMPU_METHOD

    /begin COMPU_METHOD DigitalFilterConversion ""
      LINEAR "%3.1" "Volt"
      COEFFS_LINEAR 0.001 0
    /end COMPU_METHOD

    /begin COMPU_METHOD DtChannel1.CONVERSIONV "@@@@RuleName created by CANape"
      FORM "%3.1" ""
      /begin FORMULA
        "time(X1)-time(X1[-1])"
      /end FORMULA
    /end COMPU_METHOD

    /begin COMPU_METHOD Factor100 ""
      LINEAR "%3.1" ""
      COEFFS_LINEAR 0.01 0
    /end COMPU_METHOD

    /begin COMPU_METHOD HighLow "High/Low for bits"
      TAB_VERB "%7.3" ""
      COMPU_TAB_REF HighLow
    /end COMPU_METHOD

    /begin COMPU_METHOD KF2_Y_AXIS.CONVERSION ""
      IDENTICAL "%6.2" ""
    /end COMPU_METHOD

    /begin COMPU_METHOD KF8_Conversion ""
      LINEAR "%3.1" "1/min"
      COEFFS_LINEAR 0.1 0
    /end COMPU_METHOD

    /begin COMPU_METHOD MaxChannel1.CONVERSIONV "@@@@RuleName created by CANape"
      FORM "%3.1" ""
      /begin FORMULA
        "max(phy(X1))"
      /end FORMULA
    /end COMPU_METHOD

    /begin COMPU_METHOD MinChannel1.CONVERSIONV "@@@@RuleName created by CANape"
      FORM "%3.1" ""
      /begin FORMULA
        "min(phy(X1))"
      /end FORMULA
    /end COMPU_METHOD

    /begin COMPU_METHOD Pressure "Convert Voltage into Pressure"
      LINEAR "%7.3" ""
      COEFFS_LINEAR 0.123457 0
    /end COMPU_METHOD

    /begin COMPU_METHOD TestStatus.CONVERSION ""
      TAB_VERB "%3.1" ""
      COMPU_TAB_REF TestStatus.CONVERSION
    /end COMPU_METHOD

    /begin COMPU_METHOD map1Conversion ""
      LINEAR "%3.1" "cm"
      COEFFS_LINEAR 10 0
    /end COMPU_METHOD

    /begin COMPU_METHOD map1Input_Conversion ""
      LINEAR "%3.1" "m"
      COEFFS_LINEAR 0.1 0
    /end COMPU_METHOD

    /begin COMPU_METHOD sbytePWMLevel.CONVERSION ""
      IDENTICAL "%6.2" ""
    /end COMPU_METHOD

    /begin COMPU_VTAB HighLow "High/Low for bits" TAB_VERB 2
      0 "Low"
      1 "High"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin COMPU_VTAB TestStatus.CONVERSION "" TAB_VERB 4
      0 "Off"
      1 "Silent"
      2 "Pending"
      3 "Running"
      DEFAULT_VALUE ""
    /end COMPU_VTAB

    /begin RECORD_LAYOUT CurveNxVub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 2 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT CurveNxXVub
      NO_AXIS_PTS_X 1 UBYTE
      AXIS_PTS_X 2 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 3 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT CurveV8ub
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
      FIX_NO_AXIS_PTS_X 8
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT CurveX8V8ub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 2 UBYTE ROW_DIR DIRECT
      FIX_NO_AXIS_PTS_X 8
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT CurveX8V8ubAlternate
      AXIS_PTS_X 1 UWORD INDEX_INCR DIRECT
      FNC_VALUES 2 UWORD ALTERNATE_WITH_X DIRECT
      FIX_NO_AXIS_PTS_X 8
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT CurveX8ub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      FIX_NO_AXIS_PTS_X 8
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapNxNyVub
      NO_AXIS_PTS_X 1 UBYTE
      NO_AXIS_PTS_Y 2 UBYTE
      FNC_VALUES 3 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapNxNyXYVsb
      NO_AXIS_PTS_X 1 SBYTE
      NO_AXIS_PTS_Y 2 SBYTE
      AXIS_PTS_X 3 SBYTE INDEX_INCR DIRECT
      AXIS_PTS_Y 4 SBYTE INDEX_INCR DIRECT
      FNC_VALUES 5 SBYTE ROW_DIR DIRECT
      ALIGNMENT_BYTE 1
      ALIGNMENT_WORD 1
      ALIGNMENT_LONG 1
      ALIGNMENT_FLOAT32_IEEE 1
      ALIGNMENT_FLOAT64_IEEE 1
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapNxNyXYVub
      NO_AXIS_PTS_X 1 UBYTE
      NO_AXIS_PTS_Y 2 UBYTE
      AXIS_PTS_X 3 UBYTE INDEX_INCR DIRECT
      AXIS_PTS_Y 4 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 5 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapNxXNyYVuc
      NO_AXIS_PTS_X 1 UBYTE
      AXIS_PTS_X 2 UBYTE INDEX_INCR DIRECT
      NO_AXIS_PTS_Y 3 UBYTE
      AXIS_PTS_Y 4 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 5 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapV86ub
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
      FIX_NO_AXIS_PTS_X 8
      FIX_NO_AXIS_PTS_Y 6
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapX8Y6V86ub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      AXIS_PTS_Y 2 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 3 UBYTE ROW_DIR DIRECT
      FIX_NO_AXIS_PTS_X 8
      FIX_NO_AXIS_PTS_Y 6
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapX8Y8V88ub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      AXIS_PTS_Y 2 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 3 UBYTE ROW_DIR DIRECT
      FIX_NO_AXIS_PTS_X 8
      FIX_NO_AXIS_PTS_Y 8
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT MapXYVub
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      AXIS_PTS_Y 2 UBYTE INDEX_INCR DIRECT
      FNC_VALUES 3 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__A_INT64_S
      AXIS_PTS_X 1 A_INT64 INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__A_UINT64_S
      AXIS_PTS_X 1 A_UINT64 INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT32_IEEE_S
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT32_IEEE_S._Copy1
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT64_IEEE_S
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__FLOAT64_IEEE_S._Copy1
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SBYTE_S
      AXIS_PTS_X 1 SBYTE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SBYTE_S._Copy1
      AXIS_PTS_X 1 SBYTE INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SLONG_S
      AXIS_PTS_X 1 SLONG INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SLONG_S._Copy1
      AXIS_PTS_X 1 SLONG INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SWORD_S
      AXIS_PTS_X 1 SWORD INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__SWORD_S._Copy1
      AXIS_PTS_X 1 SWORD INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UBYTE_S
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UBYTE_S._Copy1
      AXIS_PTS_X 1 UBYTE INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__ULONG_S
      AXIS_PTS_X 1 ULONG INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__ULONG_S._Copy1
      AXIS_PTS_X 1 ULONG INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UWORD_S
      AXIS_PTS_X 1 UWORD INDEX_INCR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT SSV__UWORD_S._Copy1
      AXIS_PTS_X 1 UWORD INDEX_INCR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_INT64_S
      FNC_VALUES 1 A_INT64 COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_INT64_Z
      FNC_VALUES 1 A_INT64 ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_UINT64_S
      FNC_VALUES 1 A_UINT64 COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __A_UINT64_Z
      FNC_VALUES 1 A_UINT64 ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_S
      FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_S._Copy1
      FNC_VALUES 1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_Z
      FNC_VALUES 1 FLOAT32_IEEE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT32_IEEE_Z._Copy1
      FNC_VALUES 1 FLOAT32_IEEE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_S
      FNC_VALUES 1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_S._Copy1
      FNC_VALUES 1 FLOAT64_IEEE COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_Z
      FNC_VALUES 1 FLOAT64_IEEE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __FLOAT64_IEEE_Z._Copy1
      FNC_VALUES 1 FLOAT64_IEEE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_S
      FNC_VALUES 1 SBYTE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_S._Copy1
      FNC_VALUES 1 SBYTE COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_Z
      FNC_VALUES 1 SBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SBYTE_Z._Copy1
      FNC_VALUES 1 SBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_S
      FNC_VALUES 1 SLONG COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_S._Copy1
      FNC_VALUES 1 SLONG COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_Z
      FNC_VALUES 1 SLONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SLONG_Z._Copy1
      FNC_VALUES 1 SLONG ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_S
      FNC_VALUES 1 SWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_S._Copy1
      FNC_VALUES 1 SWORD COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_Z
      FNC_VALUES 1 SWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __SWORD_Z._Copy1
      FNC_VALUES 1 SWORD ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UBYTE_S
      FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UBYTE_S._Copy1
      FNC_VALUES 1 UBYTE COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UBYTE_Z
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UBYTE_Z._Copy1
      FNC_VALUES 1 UBYTE ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_S
      FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_S._Copy1
      FNC_VALUES 1 ULONG COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_Z
      FNC_VALUES 1 ULONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULONG_Z._Copy1
      FNC_VALUES 1 ULONG ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __ULong_Value
      FNC_VALUES 1 ULONG ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_S
      FNC_VALUES 1 UWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_S._Copy1
      FNC_VALUES 1 UWORD COLUMN_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_Z
      FNC_VALUES 1 UWORD ROW_DIR DIRECT
    /end RECORD_LAYOUT

    /begin RECORD_LAYOUT __UWORD_Z._Copy1
      FNC_VALUES 1 UWORD ROW_DIR DIRECT
      ALIGNMENT_INT64 8
    /end RECORD_LAYOUT

    /begin GROUP Axis "Shared Axis for Calibration Maps"
      ROOT
      /begin REF_CHARACTERISTIC
        Curve1
      /end REF_CHARACTERISTIC
    /end GROUP

    /begin GROUP Bits "Single Bit Values"
      /begin REF_MEASUREMENT
        Counter_B4 Counter_B5 Counter_B6 Counter_B7 ShiftByte Shifter_B0 Shifter_B1
        Shifter_B2 Shifter_B3
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Bitslices "Multibit Values"
      /begin REF_MEASUREMENT
        BitSlice BitSlice0 BitSlice1 BitSlice2 TestStatus bit12Counter
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Curves "Calibration Curves"
      ROOT
      /begin REF_CHARACTERISTIC
        KL1 KL2 KL5
      /end REF_CHARACTERISTIC
    /end GROUP

    /begin GROUP Example_Double "Kommentar"
      ROOT
    /end GROUP

    /begin GROUP Example_Filter "Digital Filter v=(vin*a0+v*b0)/c0"
      ROOT
      /begin REF_CHARACTERISTIC
        a0 b0 c0
      /end REF_CHARACTERISTIC
      /begin REF_MEASUREMENT
        v vin
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Example_PWM "Generator for a PWM Signal"
      ROOT
      /begin SUB_GROUP
        PWM_Parameters PWM_Signals
      /end SUB_GROUP
    /end GROUP

    /begin GROUP Maps "Calibration Maps"
      ROOT
      /begin REF_CHARACTERISTIC
        KF2 KF3 KF4 KF5 KF6 KF7 map4_80_uc
      /end REF_CHARACTERISTIC
      /begin SUB_GROUP
        WorkingPoint
      /end SUB_GROUP
    /end GROUP

    /begin GROUP Measure "Measurement Values"
      ROOT
      /begin REF_MEASUREMENT
        KL1Output channel1 channel2 channel3 channel4
      /end REF_MEASUREMENT
      /begin SUB_GROUP
        Bits Bitslices Test_Signals
      /end SUB_GROUP
    /end GROUP

    /begin GROUP PWM_Parameters "Parametes for PWM Example"
      /begin REF_MEASUREMENT
        FW1 PWM_Level bytePWMFilter sbytePWMLevel
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP PWM_Signals "Measurement Signals from PWM"
      /begin REF_MEASUREMENT
        PWM PWMFiltered Triangle
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Parameters "Calibration Parameters"
      ROOT
      /begin REF_CHARACTERISTIC
        testString
      /end REF_CHARACTERISTIC
      /begin REF_MEASUREMENT
        ampl limit offset period
      /end REF_MEASUREMENT
      /begin SUB_GROUP
        Test_Parameters
      /end SUB_GROUP
    /end GROUP

    /begin GROUP Test_Parameters "Test Parameters, BYTE"
      /begin REF_CHARACTERISTIC
        CALRAM_LAST CALRAM_SIGN CALRAM_START gDebugLevel gTaskCycleTimerCMD gTaskCycleTimerDAQ gTaskCycleTimerECU
        gTaskCycleTimerECUpp
      /end REF_CHARACTERISTIC
    /end GROUP

    /begin GROUP Test_Signals "Test Signals"
      /begin REF_CHARACTERISTIC
        longArray1 longArray2 longArray3 longArray4
      /end REF_CHARACTERISTIC
      /begin REF_MEASUREMENT
        byte1 byte2 byte3 byte4 byteCounter dwordCounter wordCounter
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP Virtual "Virtual Signal"
      ROOT
      /begin REF_MEASUREMENT
        DtChannel1 MaxChannel1 MinChannel1
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP WorkingPoint "Example for working point"
      /begin REF_CHARACTERISTIC
        map1 map1Counter
      /end REF_CHARACTERISTIC
      /begin REF_MEASUREMENT
        map1InputX map1InputY map1Output
      /end REF_MEASUREMENT
    /end GROUP

    /begin GROUP cplusplus ""
      /begin REF_MEASUREMENT
        ecu
      /end REF_MEASUREMENT
    /end GROUP

  /end MODULE

/end PROJECT
